{"version":3,"file":"main.js","mappings":"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","sources":["webpack://evo-3/webpack/bootstrap","webpack://evo-3/webpack/runtime/global","webpack://evo-3/./src/domain/command/index.js","webpack://evo-3/./src/domain/program.js","webpack://evo-3/./src/domain/mutation.js","webpack://evo-3/./src/domain/world.js","webpack://evo-3/./src/domain/resource.js","webpack://evo-3/./src/domain/bot.js","webpack://evo-3/./src/app.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","import { OPERATIONS } from '../program';\nimport { Bot } from '../bot';\n// import Move from './command/move';\n// import RotateClockwise from './rotate_clockwise';\n// import RotateCounterclockwise from './rotate_counterclockwise';\n// import Eat from './eat';\n\nconst CLONE_RATE = 2;\n\nexport class Command {\n  // Generates random operations sequence\n  static rand() {\n    const items = [\n      OPERATIONS.MOVE,\n      OPERATIONS.ROTATE_CLOCKWISE,\n      OPERATIONS.ROTATE_COUNTERCLOCKWISE,\n      OPERATIONS.EAT,\n      OPERATIONS.EAT_SOLAR,\n      OPERATIONS.CLONE,\n      OPERATIONS.OVERPOPULATION,\n      //\t\t\tOPERATIONS.KILL_NEIGHBORS,\n    ];\n\n    // if (Math.random() > 0.99) {\n    // items.push(OPERATIONS.CLONE);\n    // }\n\n    return items[Math.floor(Math.random() * items.length)];\n  }\n\n  static execute(bot, world) {\n    if (bot.processing === true) {\n      return;\n    }\n\n    bot.processing = true;\n    // debug(bot);\n\n    const commands = {\n      [OPERATIONS.MOVE]: CommandMove,\n      [OPERATIONS.ROTATE_CLOCKWISE]: CommandRotateClockwise,\n      [OPERATIONS.ROTATE_COUNTERCLOCKWISE]: CommandRotateCounterclockwise,\n      [OPERATIONS.EAT]: CommandEat,\n      [OPERATIONS.EAT_SOLAR]: CommandEatSolar,\n      [OPERATIONS.CLONE]: CommandClone,\n      [OPERATIONS.OVERPOPULATION]: CommandOverpopulation,\n      //\t\t\t[OPERATIONS.KILL_NEIGHBORS]: CommandKillNeighbors,\n    };\n\n    // const operation = bot.program.commands.shift();\n    // if (operation === undefined) { return; }\n    // bot.program.commands.push(operation);\n\n    if (bot.program.current >= bot.program.commands.length) {\n      bot.program.current = bot.program.commands.length - 1;\n    }\n\n    const operation = bot.program.commands[bot.program.current];\n    if (operation === undefined) {\n      return;\n    }\n\n    bot.program.current++;\n    if (bot.program.current >= bot.program.commands.length) {\n      bot.program.current = 0;\n    }\n\n    commands[operation].execute(bot, world);\n\n    if (operation === OPERATIONS.EAT_SOLAR) {\n      CommandOverpopulation.execute(bot, world);\n    }\n  }\n}\n\nclass CommandMove {\n  static execute(bot, world) {\n    const { x: xNew, y: yNew } = Bot.frontPosition(bot);\n\n    const cell = world.getCell(xNew, yNew);\n    const botInFront = Bot.get(cell);\n\n    if (botInFront) {\n      bot.options = { ...bot.options, hasBotInFront: true };\n    } else {\n      // Write moved bot to new cell and remove this bot from old cell\n      world.setCellProps(xNew, yNew, { bot }, world.map);\n      delete world.getCell(bot.x, bot.y).bot;\n      bot.x = xNew;\n      bot.y = yNew;\n      bot.options = { ...bot.options, hasBotInFront: false };\n    }\n  }\n}\n\nclass CommandRotateClockwise {\n  static execute(bot, world) {\n    bot.direction = CommandRotateClockwise.rotate(bot.direction, 1);\n  }\n\n  /*\n  * @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n  * @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n  */\n  static rotate(direction, rotate) {\n    return (((direction) + rotate) & 3);\n  }\n}\n\nclass CommandRotateCounterclockwise {\n  static execute(bot, world) {\n    bot.direction = CommandRotateCounterclockwise.rotate(bot.direction, -1);\n  }\n\n  /*\n  * @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n  * @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n  */\n  static rotate(direction, rotate) {\n    return (((direction) + rotate) & 3);\n  }\n}\n\nclass CommandEat {\n  static execute(bot, world) {\n    const cell = world.getCell(bot.x, bot.y);\n    if (cell.resources.food) {\n      bot.xp += 100;\n      if (bot.xp > 255) bot.xp = 255;\n      delete cell.resources.food;\n    }\n  }\n}\n\nclass CommandEatSolar {\n  static execute(bot, world) {\n    const cell = world.getCell(bot.x, bot.y);\n\n    bot.xp += cell.resources.light.power * 3;\n  }\n}\n\nclass CommandClone {\n  static execute(bot, world) {\n    const position = Bot.backPosition(bot);\n    const backCell = world.getCell(position.x, position.y);\n    const botInBack = Bot.get(backCell);\n    if (botInBack) {\n      return;\n    }\n\n    if (bot.xp < Bot.DEFAULT_XP * CLONE_RATE) {\n      return;\n    }\n\n    // Old bot lost half xp\n    bot.xp /= 2;\n\n    // New bot stays behind old, has default XP\n    const newBot = Bot.cloneBot(\n      bot,\n      {\n        ...position,\n        id: Bot.generateId(),\n        direction: CommandClone.turn(bot.direction),\n        xp: Bot.DEFAULT_XP,\n      },\n    );\n\n    world.addBot(newBot.x, newBot.y, newBot);\n  }\n\n  static turn(direction) {\n    return (((direction / 90) + 2) & 3);\n  }\n}\n\nclass CommandOverpopulation {\n  static execute(bot, world) {\n    const bots = [];\n    let coords;\n\n    let neighbors = 0;\n\n    world.eachNeighborBot(bot, world, (neighborBot) => {\n      neighbors++;\n    });\n\n\n    bot.xp -= neighbors / 3;\n  }\n}\n\nclass CommandKillNeighbors {\n  static execute(bot, world) {\n    const { x: xNew, y: yNew } = Bot.frontPosition(bot);\n    const cell = world.getCell(xNew, yNew);\n    const botInFront = Bot.get(cell);\n    if (botInFront) {\n      world.destroyBot(botInFront);\n    }\n\n    return;\n\n    world.eachNeighborBot(bot, world, (neighborBot) => {\n      world.destroyBot(neighborBot);\n    });\n  }\n}\n","import { Command } from './command';\n\nconst PROGRAM_LENGTH = 10;\n\nexport class Program {\n  static generate() {\n    const commands = [];\n    // Create program with PROGRAM_LENGTH commands\n    for (let i = 0; i < PROGRAM_LENGTH; i++) {\n      commands.push(Command.rand());\n    }\n\n    return {\n      commands,\n      current: 0,\n    };\n  }\n\n  static step(bot, world) {\n    Command.execute(bot, world);\n  }\n}\n\nconst OPERATIONS = {\n  MOVE: 0,\n  ROTATE_CLOCKWISE: 1,\n  ROTATE_COUNTERCLOCKWISE: 2,\n  EAT: 3,\n  EAT_SOLAR: 4,\n  CLONE: 5,\n  OVERPOPULATION: 6,\n//\t\tKILL_NEIGHBORS: 7,\n};\n\nexport {\n  OPERATIONS,\n};\n","import { OPERATIONS } from './program';\n\nexport class Mutation {\n  static MUTATION_PROBABILITY = 0.001;\n\n  static mutate(bot) {\n    // Mutations are very rare\n    if (Math.random() > Mutation.MUTATION_PROBABILITY) {\n      return;\n    }\n\n    const mutations = [\n      (commands, position) => this.mutateSubstitution(commands, position),\n      (commands, position) => this.mutateDeletion(commands, position),\n      (commands, position) => this.mutateInsertion(commands, position),\n    ];\n\n    const position = Math.floor(Math.random() * bot.program.commands.length);\n\n    mutations.random()(bot.program.commands, position);\n\n    bot.style.h = this.randomChangeStyleComponent(bot.style.h);\n    bot.style.s = this.randomChangeStyleComponent(bot.style.s);\n    bot.style.v = this.randomChangeStyleComponent(bot.style.v); //  * (bot.xp * 2 / 255)\n\n\n\n    // // Substitution\n    // bot.program.commands[position] = this.randomOperationCode();\n    //\n    // // Deletion\n    // bot.program.commands.splice(position, 1);\n    //\n    // // Insertion\n    // bot.program.commands.splice(position, 0, this.randomOperationCode());\n  }\n\n\n  static randomChangeStyleComponent(value) {\n    const minComponentValue = 0;\n    const maxComponentValue = 1;\n    const change = maxComponentValue / 100;\n    let sign = Math.random() > 0.5 ? 1 : -1;\n\n    if (value + change * sign <= 0 || value + change * sign >= 1) {\n      sign *= -1;\n    }\n    return value + change * sign;\n  }\n\n  static mutateSubstitution(commands, position) {\n    commands[position] = this.randomOperationCode();\n    return commands;\n  }\n\n\n  static mutateDeletion(commands, position) {\n    commands.splice(position, 1);\n    return commands;\n  }\n\n  static mutateInsertion(commands, position) {\n    commands.splice(position, 0, this.randomOperationCode());\n    return commands;\n  }\n\n  static randomOperationsPosition(commands) {\n    return Math.floor(Math.random() * bot.program.commands.length);\n  }\n\n  static randomOperationCode() {\n    return Object.values(OPERATIONS).random();\n  }\n}\n","import { Bot } from './bot';\nimport { Resource } from './resource';\nimport { Mutation } from './mutation';\nimport { Program } from './program';\n\n/**\n * Bot has 4 directions: right, up, left, down. Direction stored as code:\n * right - 0, up - 90, left - 180, down - 270. It is angle of rotation counterclockwise.\n */\n\nconst WIDTH = 100;\nconst HEIGHT = 50;\n\nexport class World {\n\n  constructor(width, height) {\n    this.width = width; // cols\n    this.height = height; // rows\n    this.initCells();\n    // For debug\n    window.debugWorld = this;\n  }\n\n  static validateCoords(x, y) {\n    if (x >= WIDTH || x < 0) {\n      throw `x should be from 0 to ${WIDTH}`;\n    }\n\n    if (y >= HEIGHT || y < 0) {\n      throw `x should be from 0 to ${WIDTH}`;\n    }\n  }\n\n  static normalizeCoords(x, y) {\n    if (x < 0) x = WIDTH - 1;\n    if (x > WIDTH - 1) x = 0;\n    if (y < 0) y = HEIGHT - 1;\n    if (y > HEIGHT - 1) y = 0;\n\n    return { x: x, y: y };\n  }\n\n  eachCell(performer) {\n    for(let x = 0; x < this.width; x++) {\n      for(let y = 0; y < this.height; y++) {\n        performer(x, y);\n      }\n    }\n  }\n\n  eachBot(performer) {\n    this.eachCell((x, y) => {\n      const bot = Bot.get(this.getCell(x, y));\n      //debug(bot)\n      if (bot) {\n        performer(bot);\n      }\n    });\n  }\n\n  eachNeighborBot(bot, world, performer) {\n    for(let x = -1; x <= 1; x++) {\n      for(let y = -1; y <= 1; y++) {\n        if (x !== 0 && y !== 0) {\n\n          const coords = World.normalizeCoords(bot.x + x, bot.y + y);\n          const cell = world.getCell(coords.x, coords.y);\n          const neighborBot = Bot.get(cell);\n          if(neighborBot && Bot.isProcessing(neighborBot)) {\n            performer(neighborBot);\n          }\n        }\n      }\n    }\n  }\n\n  populate() {\n    //this.populateTest1(); return;\n\n    this.eachCell((x, y) => {\n      if (Math.random() > 0.90) {\n        this.addBot(x, y, Bot.generateRandom(x, y));\n      }\n    });\n  }\n\n  populateTest1() {\n    TEST_CASES[2].forEach((botOptions) => {\n      this.addBot(botOptions.x, botOptions.y, botOptions);\n    });\n  }\n\n  initResources(map) {\n    let a = 0;\n    this.eachCell((x, y) => {\n      if (Math.random() > 0.9) {\n        a ++;\n        let resource = Resource.generateRandom();\n        Resource.add(x, y, resource, map);\n      }\n      let resourceLight = { light: { type: 'light', power: 1 - y / HEIGHT } };\n      Resource.add(x, y, resourceLight, map);\n    });\n    //debug(a)\n  }\n\n  step() {\n    // localStorage.world = JSON.stringify(this.map);\n\n    // Perform next action for every Bot\n    this.eachBot( (bot) => {\n      Mutation.mutate(bot);\n      Program.step(bot, this);\n\n      Bot.liveStep(bot);\n      Bot.tryDie(bot, this);\n    });\n    //debug(this.map[0][0].resources);\n\n    // this.eachBot( bot => {\n    //\n    // });\n\n    // Bots perform sequentially, cell by cell, so if bot perform in one cell and moved to other cell,\n    // it can lead to repeated performing. On the world step we mark bot as processing and bot will not\n    // performed again on this step. After processing bots we should flush bots locks.\n    this.eachBot( bot => bot.processing = false);\n  }\n\n\n\n  destroyBot(bot) {\n    delete this.getCell(bot.x, bot.y).bot;\n  }\n\n  getCell(x, y) {\n    return this.map[x][y];\n  }\n\n  setCellProps(x, y, value, map) {\n    map[x][y] = { ...map[x][y], ...value };\n  }\n\n  initCell(x, y, value = undefined) {\n    if (value === undefined) {\n      value = {\n        resources: {},\n      };\n    }\n\n    if (this.map[x] === undefined) {\n      this.map[x] = [];\n    }\n\n    this.map[x][y] = value;\n  }\n\n  /* PRIVATE */\n  initCells() {\n    //debug('initCells');\n    this.map = [];\n    this.eachCell((x, y) => {\n      this.initCell(x, y);\n    });\n  }\n\n  addBot(x, y, bot) {\n    World.validateCoords(x, y);\n\n    if (this.map[x][y].bot) {\n      throw `Bot already exists in cell ${x}:${y}`;\n    }\n    //debug('addBot');\n    this.map[x][y].bot = bot;\n  }\n\n  print() {\n    let s = '';\n    for(let y = 0; y < this.height; y++) {\n      for(let x = 0; x < this.width; x++) {\n        s += this.map[x][y].bot ? 1 : '.';\n      }\n      s += \"\\n\";\n    }\n    //debug(s);\n  }\n}\n\n\n// Creates world with population\nexport class WorldCreator {\n  static create() {\n    // Create world as matrix\n    const world = new World(WIDTH, HEIGHT);\n    // Create bots in world\n    world.populate();\n    world.initResources(world.map);\n\n    return world;\n  }\n}\n\nexport {\n  WIDTH,\n  HEIGHT,\n};\n","import { World } from './world';\n\nexport class Resource {\n  static add(x, y, resource, map) {\n    World.validateCoords(x, y);\n    map[x][y].resources = {\n      ...map[x][y].resources,\n      ...resource,\n    };\n  }\n\n  static generateRandom() {\n    return {\n      food: {\n        type: 'food',\n      },\n    };\n  }\n}\n","import { Program } from './program';\nimport { Resource } from './resource';\nimport { World } from './world';\n\nconst DEFAULT_BOT = {\n  x: 0,\n  y: 0,\n  direction: 0,\n  id: null,\n  rotate: 1,\n  program: { commands: [], current: 0 }, // TODO: ссылка на общий объект\n  options: {}, // TODO: ссылка на общий объект\n  xp: 127,\n  style: {\n    h: 1,\n    s: 1,\n    b: 1\n  }\n\n};\n\n\nfunction shifts() {\n  return [[1, 0], [0, -1], [-1, 0], [0, 1]];\n  //      left    top      right    bottom\n}\n\nfunction rightCyclicShift(ar) {\n  // Mutates ar for performance purposes\n  ar.push(ar.shift());\n  return ar;\n}\n\n/*\n* @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\nfunction rotate1(direction, rotate) {\n  return (((direction) + rotate) & 3);\n}\n\n/*\n* @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\nfunction rotate2(direction, rotate) {\n  return (((direction) + rotate) & 3);\n}\n\n// function rightPosition(bot) {\n//   return World.normalizeCoords(bot.x + 1, bot.y + 0);\n// }\n//\n// function topPosition(bot) {\n//   return World.normalizeCoords(bot.x + 0, bot.y - 1);\n// }\n//\n// function leftPosition(bot) {\n//   return World.normalizeCoords(bot.x - 1, bot.y + 0);\n// }\n//\n// function bottomPosition(bot) {\n//   return World.normalizeCoords(bot.x + 0, bot.y + 1);\n// }\n\nclass Bot {\n  static DEFAULT_XP = 10;\n\n  static generateRandom(x, y) {\n    return {\n      ...DEFAULT_BOT,\n      id: Bot.generateId(),\n      x: x,\n      y: y,\n      direction: Math.floor(Math.random() * 4),\n      rotate: Math.random() > 0.5 ? 1 : -1,\n      program: Program.generate(),\n      options: {},\n      style: {\n        h: Math.random(),\n        s: Math.random(),\n        v: Math.random(),\n      }\n    };\n  }\n\n  static get(cell) {\n    return cell.bot;\n  }\n\n  // Returns coordinates behind the back of the bot\n  static frontPosition(bot) {\n    const shift = shifts()[bot.direction];\n    return World.normalizeCoords(bot.x + shift[0], bot.y + shift[1]);\n  }\n\n  // Returns coordinates behind the back of the bot\n  static backPosition(bot) {\n    const shift = rightCyclicShift(rightCyclicShift(shifts()))[bot.direction];\n    //const shift = [[-1, 0], [0, 1], [1, 0], [0, -1]][bot.direction];\n    return World.normalizeCoords(bot.x + shift[0], bot.y + shift[1]);\n  }\n\n  static cloneBot(bot, changes = {}) {\n    const newBot = JSON.parse(JSON.stringify(bot));\n    return {\n      ...newBot,\n      ...changes,\n    }\n  }\n\n  static generateId() {\n    return '' + Math.random();\n  }\n\n  // tick of the bot live\n  static liveStep(bot) {\n    bot.xp--;\n  }\n\n  static tryDie(bot, world) {\n    if (bot.xp <= 0) {\n      world.destroyBot(bot);\n\n      const resource = Resource.generateRandom();\n\n      Resource.add(bot.x, bot.y, resource, world.map);\n    }\n  }\n\n  static isProcessing(bot) {\n    return bot.processing == false\n  }\n}\n\nexport { Bot, DEFAULT_BOT };\n","import { Bot, DEFAULT_BOT } from './domain/bot';\nimport { WorldCreator, World, WIDTH, HEIGHT } from './domain/world';\n\n// const DEFAULT_CELL = {\n// \tresources: {},\n// };\n\n// const FPS = 1;\n\n// Groups of bots for testing purposes. They can be used in populate()\nconst TEST_CASES = [\n  [\n    {\n      ...DEFAULT_BOT, x: 42, y: 20, direction: 90, id: '0.99', rotate: 1, program: { commands: [1, 1, 0, 0, 1] }, options: {},\n    },\n    {\n      ...DEFAULT_BOT, x: 42, y: 21, direction: 90, id: '0.10', rotate: 1, program: { commands: [0, 1, 1, 1, 0] }, options: {},\n    },\n  ],\n  [\n    {\n      ...DEFAULT_BOT, x: 10, y: 10, direction: 270, id: '0.99', rotate: 1, program: { commands: [0, 1] }, options: {}, processing: false,\n    },\n    {\n      ...DEFAULT_BOT, x: 10, y: 11, direction: 90, id: '0.10', rotate: 1, program: { commands: [0, 1] }, options: {}, processing: false,\n    },\n  ],\n  [\n    {\n      ...DEFAULT_BOT, x: 10, y: 10, direction: 270, id: '0.99', rotate: 1, program: { commands: [5] }, options: {}, processing: false,\n    },\n  ],\n];\n\n/** ***********************************************\n * Infrastructure level\n ************************************************ */\n\nfunction debug(msg) {\n  console.log(msg);\n}\n\nclass Drawer {\n  constructor(world) {\n    this.world = world;\n    this.size = 10; // size of shulker\n\n    const canvas = document.getElementById('cnv');\n    canvas.width = WIDTH * this.size;\n    canvas.height = HEIGHT * this.size;\n    // canvas.style.width = WIDTH * 10;\n    // canvas.style.height = HEIGHT * 10;\n    this.ctx = canvas.getContext('2d');\n    // this.ctx.imageSmoothingEnabled = false;\n  }\n\n  redraw() {\n    const imageData = this.ctx.createImageData(WIDTH * this.size, HEIGHT * this.size);\n\n    // Fill entire canvas with black\n    for (let i = 0; i < WIDTH * this.size * HEIGHT * this.size * 4; i += 4) {\n      imageData.data[i] = 0;\n      imageData.data[i + 1] = 0;\n      imageData.data[i + 2] = 0;\n      imageData.data[i + 3] = 255;\n    }\n\n    // Draw resources\n    let a = 0;\n    this.world.eachCell((x, y) => {\n      const cell = this.world.getCell(x, y);\n      if (cell.resources) {\n        if (cell.resources.food) {\n          a++;\n        }\n\n        this.drawResource(x, y, cell.resources, imageData);\n      }\n    });\n    // debug(`cells: ${a}`)\n\n    // Draw bots\n    this.world.eachBot((bot) => {\n      this.drawBot(bot, imageData);\n    });\n\n    // Display data on canvas\n    this.ctx.putImageData(imageData, 0, 0);\n  }\n\n  drawResource(x, y, resources, imageData) {\n    if (resources.food) {\n      x *= this.size;\n      y *= this.size;\n      // const color = Math.random() > 0.5 ? { r: 140, g: 80, b: 0 } : { r: 0, g: 80, b: 0 };\n      const color = { r: 140, g: 80, b: 0 };\n      this.writeImageDataResource(x, y, color, imageData);\n    }\n  }\n\n  writeImageDataResource(vx, vy, color, imageData) {\n    for (let x = vx + 3; x < vx + this.size - 3; x++) {\n      for (let y = vy + 3; y < vy + this.size - 3; y++) {\n        this.writeImageDataPixel(x, y, color, imageData);\n      }\n    }\n  }\n\n  drawBot(bot, imageData) {\n    let color;\n    // if (bot.options.hasBotInFront) {\n    //\tcolor = { r: 255, g: 0, b: 0 };\n    // } else {\n    // Bot becomes dark if hungry\n\n    // const g = 128 + parseInt(parseFloat(bot.id) * 128);\n\n    // color = { r: 0, g: g, b: 100 };\n    color = HSVtoRGB(bot.style.h, bot.style.s, bot.style.v);\n\n    // }\n    bot = this.setColor(bot);\n\n    const x = bot.x * this.size;\n    const y = bot.y * this.size;\n\n    this.writeImageDataBot(x, y, bot.direction, color, imageData);\n  }\n\n  setColor(bot) {\n\t  return bot;\n  }\n\n  writeImageDataBot(vx, vy, direction, color, imageData) {\n\n    for (let y = vy + 1; y < vy + this.size - 1; y += 1) {\n      this.writeImageDataPixel(vx, y, color, imageData);\n      this.writeImageDataPixel(vx + this.size - 1, y, color, imageData);\n    }\n\n    for (let x = vx + 1; x < vx + this.size - 1; x += 1) {\n      this.writeImageDataPixel(x, vy, color, imageData);\n      this.writeImageDataPixel(x, vy + this.size - 1, color, imageData);\n    }\n\n    for (let x = vx + 1; x < vx + this.size - 1; x++) {\n      for (let y = vy + 1; y < vy + this.size - 1; y++) {\n        this.writeImageDataPixel(x, y, color, imageData);\n      }\n    }\n\n\n\n    // //Draw mouth (face)\n    // const mouthDeep = 1;\n    // const mouthMargins = 3;\n    // const faceColor = { r: 0, g: 0, b: 0 };\n    // if (direction == 0) {\n    // \tfor (let x = vx + this.size - mouthDeep; x < vx + this.size; x++) {\n    // \t\tfor (let y = vy + mouthMargins; y < vy + this.size - mouthMargins; y++) {\n    // \t\t\tthis.writeImageDataPixel(x, y, faceColor, imageData);\n    // \t\t}\n    // \t}\n    // }\n    // if (direction == 90) {\n    // \tfor (let x = vx + mouthMargins; x < vx + this.size - mouthMargins; x++) {\n    // \t\tfor (let y = vy; y < vy + mouthDeep; y++) {\n    // \t\t\tthis.writeImageDataPixel(x, y, faceColor, imageData);\n    // \t\t}\n    // \t}\n    // }\n    // if (direction == 180) {\n    // \tfor (let x = vx; x < vx + mouthDeep; x++) {\n    // \t\tfor (let y = vy + mouthMargins; y < vy + this.size - mouthMargins; y++) {\n    // \t\t\tthis.writeImageDataPixel(x, y, faceColor, imageData);\n    // \t\t}\n    // \t}\n    // }\n    // if (direction == 270) {\n    // \tfor (let x = vx + mouthMargins; x < vx + this.size - mouthMargins; x++) {\n    // \t\tfor (let y = vy + this.size - mouthDeep; y < vy + this.size; y++) {\n    // \t\t\tthis.writeImageDataPixel(x, y, faceColor, imageData);\n    // \t\t}\n    // \t}\n    // }\n  }\n\n  writeImageDataPixel(x, y, color, imageData) {\n    let index = ((y * (WIDTH * this.size * 4)) + (x * 4)) + 0;\n    imageData.data[index] = color.r;\n    index++;\n    imageData.data[index] = color.g;\n    index++;\n    imageData.data[index] = color.b;\n    index++;\n    imageData.data[index] = color.a === undefined ? 255 : color.a;\n  }\n}\n\nlet counter = 0;\nclass GamePerformer {\n  constructor(world) {\n    if (!world) throw Error('Invalid argument world');\n    this.world = world;\n    this.drawer = new Drawer(world);\n  }\n\n  step() {\n    let t0 = performance.now();\n\n    this.world.step();\n    t0 = performance.now() - t0;\n\n    counter++;\n    let t1 = performance.now();\n    this.drawer.redraw();\n    t1 = performance.now() - t1;\n\n    if (counter % 11 === 0) {\n      console.log(`perf: ${t0}, ${t1} milliseconds.`);\n    }\n\n    requestAnimationFrame(() => this.step());\n  }\n\n  run() {\n    requestAnimationFrame(() => this.step());\n    this.initDebugWindow();\n  }\n\n  initDebugWindow() {\n    const cnv = document.getElementById('cnv');\n    const info = document.getElementById('info');\n\n    const handleMouse = (e) => {\n      // const width = cnv.clientLeft;\n      // const height = cnv.clientHeight;\n\n      const botWidth = cnv.clientWidth / WIDTH;\n      const botHeight = cnv.clientHeight / HEIGHT;\n\n      const botX = parseInt(e.x / botWidth);\n      const botY = parseInt(e.y / botHeight);\n\n      this.debugOptions = {\n        botX,\n        botY,\n      };\n    };\n    cnv.addEventListener('mousedown', handleMouse);\n\n    requestAnimationFrame(() => this.updateDebugWindow());\n  }\n\n  updateDebugWindow() {\n    if (this.debugOptions) {\n      const info = document.getElementById('info');\n\n      const cell = debugWorld.getCell(this.debugOptions.botX, this.debugOptions.botY);\n      let bot = Bot.get(cell);\n\n      if (!bot) {\n        bot = {\n          x: '',\n          y: '',\n          xp: '',\n          program: '',\n          id: '',\n        };\n      }\n\n      let content = '';\n\n      // `${jsonPretty}`\n      // const jsonPretty = JSON.stringify(bot);\n      content += `x: ${bot.x}</br>`;\n      content += `y: ${bot.y}</br>`;\n      content += `xp: ${Math.floor(bot.xp)}</br>`;\n      content += `program: ${bot.program.commands}</br>`;\n      content += `id: ${bot.id}</br>`;\n\n      info.innerHTML = content;\n\n      // info.innerHTML = `${botX}:${botY}:${jsonPretty}`;\n      // info.style.left = e.x + 'px';\n      // info.style.top = e.y + 'px';\n    }\n\n    requestAnimationFrame(() => this.updateDebugWindow());\n  }\n}\n\nfunction run() {\n  const world = WorldCreator.create();\n  const game = new GamePerformer(world);\n  game.run();\n}\n\n/* accepts parameters\n * h  Object = {h:x, s:y, v:z}\n * OR\n * h, s, v\n * https://stackoverflow.com/questions/17242144/javascript-convert-hsb-hsv-color-to-rgb-accurately\n*/\nfunction HSVtoRGB(h, s, v) {\n  let r; let g; let b; let i; let f; let p; let q; let\n    t;\n  if (arguments.length === 1) {\n    s = h.s, v = h.v, h = h.h;\n  }\n  i = Math.floor(h * 6);\n  f = h * 6 - i;\n  p = v * (1 - s);\n  q = v * (1 - f * s);\n  t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0: r = v, g = t, b = p; break;\n    case 1: r = q, g = v, b = p; break;\n    case 2: r = p, g = v, b = t; break;\n    case 3: r = p, g = q, b = v; break;\n    case 4: r = t, g = p, b = v; break;\n    case 5: r = v, g = p, b = q; break;\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  };\n}\n\nArray.prototype.random = function () {\n  return this[Math.floor((Math.random() * this.length))];\n};\n\nrun();\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","Command","items","MOVE","ROTATE_CLOCKWISE","ROTATE_COUNTERCLOCKWISE","EAT","EAT_SOLAR","CLONE","OVERPOPULATION","Math","floor","random","length","bot","world","processing","commands","program","current","operation","undefined","execute","CommandMove","frontPosition","xNew","x","yNew","y","cell","getCell","get","options","hasBotInFront","setCellProps","map","CommandRotateClockwise","direction","rotate","CommandRotateCounterclockwise","CommandEat","resources","food","xp","CommandEatSolar","light","power","CommandClone","position","backPosition","backCell","DEFAULT_XP","newBot","cloneBot","id","generateId","turn","addBot","CommandOverpopulation","neighbors","eachNeighborBot","neighborBot","Program","i","push","rand","OPERATIONS","Mutation","MUTATION_PROBABILITY","mutations","mutateSubstitution","mutateDeletion","mutateInsertion","style","h","randomChangeStyleComponent","s","v","value","change","maxComponentValue","sign","randomOperationCode","splice","Object","values","World","width","height","initCells","debugWorld","performer","eachCell","coords","normalizeCoords","isProcessing","generateRandom","TEST_CASES","forEach","botOptions","resource","add","resourceLight","type","eachBot","mutate","step","liveStep","tryDie","initCell","validateCoords","WorldCreator","populate","initResources","Resource","DEFAULT_BOT","b","shifts","rightCyclicShift","ar","shift","Bot","generate","changes","JSON","parse","stringify","destroyBot","Drawer","size","canvas","document","getElementById","ctx","getContext","imageData","createImageData","data","drawResource","drawBot","putImageData","writeImageDataResource","r","vx","vy","color","writeImageDataPixel","setColor","writeImageDataBot","index","a","counter","GamePerformer","Error","drawer","t0","performance","now","t1","redraw","console","log","requestAnimationFrame","initDebugWindow","cnv","addEventListener","botWidth","clientWidth","botHeight","clientHeight","botX","parseInt","botY","debugOptions","updateDebugWindow","info","content","innerHTML","run","create","HSVtoRGB","f","p","q","t","arguments","round","Array","prototype"],"sourceRoot":""}