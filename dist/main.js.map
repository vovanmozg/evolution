{"version":3,"file":"main.js","mappings":"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","sources":["webpack://evo-3/./src/domain/world/constants.js","webpack://evo-3/./src/domain/world/coords.js","webpack://evo-3/./src/domain/world/bot_finder.js","webpack://evo-3/./src/domain/world/map_modifier.js","webpack://evo-3/./src/domain/bot.js","webpack://evo-3/./src/domain/resource.js","webpack://evo-3/./src/domain/program/constants.js","webpack://evo-3/./src/utils.js","webpack://evo-3/./src/domain/mutation.js","webpack://evo-3/./src/domain/command/move.js","webpack://evo-3/./src/domain/command/rotate_clockwise.js","webpack://evo-3/./src/domain/command/rotate_counterclockwise.js","webpack://evo-3/./src/domain/command/eat.js","webpack://evo-3/./src/domain/command/eat_solar.js","webpack://evo-3/./src/domain/command/clone.js","webpack://evo-3/./src/domain/command/overpopulation.js","webpack://evo-3/./src/domain/command/index.js","webpack://evo-3/./src/domain/program/program.js","webpack://evo-3/./src/domain/world.js","webpack://evo-3/./src/drawer.js","webpack://evo-3/./src/debug_window.js","webpack://evo-3/./src/app.js","webpack://evo-3/./src/main.js"],"sourcesContent":["const WIDTH = 70;\nconst HEIGHT = 40;\n\nexport {\n  WIDTH,\n  HEIGHT,\n};\n","import { HEIGHT, WIDTH } from './constants';\n\nfunction normalizeCoords(x, y) {\n  if (x < 0) x = WIDTH - 1;\n  if (x > WIDTH - 1) x = 0;\n  if (y < 0) y = HEIGHT - 1;\n  if (y > HEIGHT - 1) y = 0;\n\n  return { x, y };\n}\n\nconst validateCoords = (x, y) => {\n  if (x >= WIDTH || x < 0) {\n    throw new Error(`x should be from 0 to ${WIDTH}`);\n  }\n\n  if (y >= HEIGHT || y < 0) {\n    throw new Error(`x should be from 0 to ${WIDTH}`);\n  }\n};\n\nexport {\n  normalizeCoords,\n  validateCoords,\n};\n","// Returns coordinates behind the back of the bot\n// Returns coordinates behind the back of the bot\nimport { normalizeCoords } from './coords';\n\n//              left    top      right    bottom\nconst SHIFTS = [[1, 0], [0, -1], [-1, 0], [0, 1]];\n\nconst getBot = (x, y, map) => map && map[x] && map[x][y] && map[x][y].bot;\n\nfunction rightCyclicShift(ar) {\n  // Mutates ar for performance purposes\n  ar.push(ar.shift());\n  return ar;\n}\n\nfunction frontPosition(bot) {\n  const shift = SHIFTS[bot.direction];\n  return normalizeCoords(bot.x + shift[0], bot.y + shift[1]);\n}\n\nfunction backPosition(bot) {\n  const shift = rightCyclicShift(rightCyclicShift(SHIFTS))[bot.direction];\n  return normalizeCoords(bot.x + shift[0], bot.y + shift[1]);\n}\n\n// function aheadBotByBot(bot, world) {\n//   const position = frontPosition(bot);\n//   return aheadBotByPosition(position, world);\n// }\n\n// const aheadBotByPosition = (position, world) => {\n//   getBot(position.x, position.y, world.map);\n// };\n// const behindBotByPosition = (position, world) => getBot(position.x, position.y, world.map);\n\n// function getBehindBot(bot, world) {\n//   const position = backPosition(bot);\n// }\n\nfunction eachNeighborBot(bot, world, performer, botIsProcessing) {\n  for (let x = -1; x <= 1; x += 1) {\n    for (let y = -1; y <= 1; y += 1) {\n      if (x !== 0 && y !== 0) {\n        const coords = normalizeCoords(bot.x + x, bot.y + y);\n        const neighborBot = getBot(coords.x, coords.y, world.map);\n        if (neighborBot && botIsProcessing(neighborBot)) {\n          performer(neighborBot);\n        }\n      }\n    }\n  }\n}\n\nexport {\n  eachNeighborBot,\n  backPosition,\n  frontPosition,\n  //  aheadBotByPosition,\n  getBot,\n};\n","import { getBot } from './bot_finder';\nimport { validateCoords } from './coords';\n\nconst setCellProps = (x, y, value, map) => {\n  map[x][y] = { ...map[x][y], ...value };\n  return map;\n};\n\nconst removeBot = (x, y, map) => {\n  delete map[x][y].bot;\n  return map;\n};\n\nfunction moveBot(bot, dest, map) {\n  if (getBot(dest.x, dest.y, map)) {\n    throw new Error(`Bot in cell ${dest.x}:${dest.y} already exists`);\n  }\n  // Write moved bot to new cell and remove this bot from old cell\n  setCellProps(dest.x, dest.y, { bot }, map);\n  removeBot(bot.x, bot.y, map);\n  bot.x = dest.x;\n  bot.y = dest.y;\n}\n\nfunction addBot(x, y, bot, map) {\n  validateCoords(x, y);\n\n  if (map[x][y].bot) {\n    throw new Error(`Bot already exists in cell ${x}:${y}`);\n  }\n  // debug('addBot');\n  map[x][y].bot = bot;\n\n  return map;\n}\n\nfunction getCell(x, y, map) {\n  return map[x][y];\n}\n\nexport {\n  addBot,\n  getCell,\n  moveBot,\n  removeBot,\n};\n","import { removeBot } from './world/map_modifier';\n\nconst DEFAULT_BOT = {\n  x: 0,\n  y: 0,\n  direction: 0,\n  id: null,\n  rotate: 1,\n  program: { commands: [], current: 0 }, // TODO: ссылка на общий объект\n  options: {}, // TODO: ссылка на общий объект\n  xp: 127,\n  style: {\n    h: 1,\n    s: 1,\n    b: 1,\n  },\n};\n\nconst RIGHT = 0;\nconst TOP = 1;\nconst LEFT = 2;\nconst BOTTOM = 3;\nconst DEFAULT_XP = 10;\n\n/*\n* @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\n// function rotate1(direction, rotate) {\n//   return ((direction + rotate) & 3);\n// }\n\n/*\n* @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\n// function rotate2(direction, rotate) {\n//   return ((direction + rotate) & 3);\n// }\n\n// function rightPosition(bot) {\n//   return World.normalizeCoords(bot.x + 1, bot.y + 0);\n// }\n//\n// function topPosition(bot) {\n//   return World.normalizeCoords(bot.x + 0, bot.y - 1);\n// }\n//\n// function leftPosition(bot) {\n//   return World.normalizeCoords(bot.x - 1, bot.y + 0);\n// }\n//\n// function bottomPosition(bot) {\n//   return World.normalizeCoords(bot.x + 0, bot.y + 1);\n// }\n\nfunction cloneBot(bot, changes = {}) {\n  return {\n    x: changes.x === undefined ? bot.x : changes.x,\n    y: changes.y === undefined ? bot.y : changes.y,\n    id: changes.id === undefined ? bot.id : changes.id,\n    direction: changes.direction === undefined ? bot.direction : changes.direction,\n    xp: changes.xp === undefined ? bot.xp : changes.xp,\n\n    rotate: bot.rotate,\n    program: {\n      commands: bot.program.commands.slice(),\n      current: bot.program.current,\n    },\n    options: { ...bot.options },\n    style: {\n      h: bot.style.h,\n      s: bot.style.s,\n      v: bot.style.v,\n    },\n    processing: bot.processing,\n  };\n}\n\nfunction isProcessing(bot) {\n  return bot.processing === false;\n}\n//\n// function isDirectionRight(bot) {\n//   return bot.direction === 0;\n// }\n//\n// function isDirectionLeft(bot) {\n//   return bot.direction === 2;\n// }\n//\n// function isDirectionTop(bot) {\n//   return bot.direction === 1;\n// }\n//\n// function isDirectionBottom(bot) {\n//   return bot.direction === 3;\n// }\n\nfunction generateId() {\n  return `${Math.random()}`;\n}\n\nfunction generateRandom(x, y, generateProgram) {\n  return {\n    ...DEFAULT_BOT,\n    id: generateId(),\n    x,\n    y,\n    direction: Math.floor(Math.random() * 4),\n    rotate: Math.random() > 0.5 ? 1 : -1,\n    program: generateProgram(),\n    options: {},\n    style: {\n      h: Math.random(),\n      s: Math.random(),\n      v: Math.random(),\n    },\n  };\n}\n\n// tick of the bot live\nfunction liveStep(bot) {\n  bot.xp -= 1;\n}\n\nfunction tryDie(bot, world, onDie) {\n  if (bot.xp <= 0) {\n    removeBot(bot.x, bot.y, world.map);\n    onDie(bot, world.map);\n  }\n}\n\nexport {\n  isProcessing,\n  generateRandom,\n  liveStep,\n  tryDie,\n};\n\nexport default {\n  generateId,\n  generateRandom,\n  liveStep,\n  tryDie,\n  cloneBot,\n  isProcessing,\n  DEFAULT_BOT,\n  RIGHT,\n  TOP,\n  LEFT,\n  BOTTOM,\n  DEFAULT_XP,\n};\n","// import { validateCoords } from './world';\n\nfunction add(x, y, resource, map) {\n  // validateCoords(x, y);\n  map[x][y].resources = {\n    ...map[x][y].resources,\n    ...resource,\n  };\n}\n\nfunction generateRandom() {\n  return {\n    food: {\n      type: 'food',\n    },\n  };\n}\n\nexport {\n  add,\n  generateRandom,\n};\n","const OPERATIONS = {\n  MOVE: 0,\n  CLONE: 1,\n  EAT: 2,\n  EAT_SOLAR: 3,\n  ROTATE_CLOCKWISE: 4,\n  ROTATE_COUNTERCLOCKWISE: 5,\n  OVERPOPULATION: 6,\n  // KILL_NEIGHBORS: 7,\n};\n\nexport {\n  OPERATIONS,\n};\n","function arRandom(array) {\n  return array[Math.floor((Math.random() * array.length))];\n}\n\nexport {\n  arRandom,\n};\n","import { OPERATIONS } from './program/constants';\n\nimport { arRandom } from '../utils';\n\nconst MUTATION_PROBABILITY = 0.001;\n\nfunction randomOperationCode() {\n  return arRandom(Object.values(OPERATIONS));\n}\n\nfunction randomChangeStyleComponent(value) {\n  // const minComponentValue = 0;\n  const maxComponentValue = 1;\n  const change = maxComponentValue / 100;\n  let sign = Math.random() > 0.5 ? 1 : -1;\n\n  if (value + change * sign <= 0 || value + change * sign >= 1) {\n    sign *= -1;\n  }\n  return value + change * sign;\n}\n\nfunction mutateSubstitution(commands, position) {\n  commands[position] = randomOperationCode();\n  return commands;\n}\n\nfunction mutateDeletion(commands, position) {\n  commands.splice(position, 1);\n  return commands;\n}\n\nfunction mutateInsertion(commands, position) {\n  commands.splice(position, 0, randomOperationCode());\n  return commands;\n}\n\n// function randomOperationsPosition(commands) {\n//   return Math.floor(Math.random() * bot.program.commands.length);\n// }\n\nfunction mutate(bot) {\n  // Mutations are very rare\n  if (Math.random() > MUTATION_PROBABILITY) {\n    return;\n  }\n\n  const mutations = [\n    (commands, position) => mutateSubstitution(commands, position),\n    (commands, position) => mutateDeletion(commands, position),\n    (commands, position) => mutateInsertion(commands, position),\n  ];\n\n  const position = Math.floor(Math.random() * bot.program.commands.length);\n\n  arRandom(mutations)(bot.program.commands, position);\n\n  bot.style.h = randomChangeStyleComponent(bot.style.h);\n  bot.style.s = randomChangeStyleComponent(bot.style.s);\n  bot.style.v = randomChangeStyleComponent(bot.style.v); //  * (bot.xp * 2 / 255)\n\n  // // Substitution\n  // bot.program.commands[position] = randomOperationCode();\n  //\n  // // Deletion\n  // bot.program.commands.splice(position, 1);\n  //\n  // // Insertion\n  // bot.program.commands.splice(position, 0, randomOperationCode());\n}\n\nexport {\n  mutate,\n};\n","import { frontPosition, getBot } from '../world/bot_finder';\nimport { moveBot } from '../world/map_modifier';\n\nfunction execute(bot, world) {\n  const position = frontPosition(bot);\n  bot.options.hasBotInFront = !!getBot(position.x, position.y, world.map);\n\n  if (!bot.options.hasBotInFront) {\n    moveBot(bot, position, world.map);\n  }\n}\n\nexport default {\n  execute,\n};\n","/*\n* @param direction {Number} can be 0 (right), 1 (top), 2 (left), 3 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\nconst rotate = (direction, rotateCounts) => (direction + rotateCounts) & 3;\n\nfunction execute(bot, _world) {\n  bot.direction = rotate(bot.direction, 1);\n}\n\nexport default {\n  execute,\n};\n","/*\n* @param direction {Number} can be 0 (right), 1 (top), 2 (left), 3 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\n// TODO: code duplication with rotate_clockwise.js\nconst rotate = (direction, rotateCounts) => (direction + rotateCounts) & 3;\n\nfunction execute(bot, _world) {\n  bot.direction = rotate(bot.direction, -1);\n}\n\nexport default {\n  execute,\n};\n","import { getCell } from '../world/map_modifier';\n\nfunction execute(bot, world) {\n  const cell = getCell(bot.x, bot.y, world.map);\n  if (cell.resources.food) {\n    bot.xp += 100;\n    if (bot.xp > 255) bot.xp = 255;\n    delete cell.resources.food;\n  }\n}\n\nexport default {\n  execute,\n};\n","import { getCell } from '../world/map_modifier';\n\nfunction execute(bot, world) {\n  const cell = getCell(bot.x, bot.y, world.map);\n\n  bot.xp += cell.resources.light.power * 3;\n}\n\nexport default {\n  execute,\n};\n","import Bot from '../bot';\nimport { backPosition, getBot } from '../world/bot_finder';\nimport { addBot } from '../world/map_modifier';\n\nconst CLONE_RATE = 2;\n\nconst turn = (direction) => (direction + 2) & 3;\n\nfunction execute(bot, world) {\n  const position = backPosition(bot);\n  const botInBack = getBot(position.x, position.y, world.map);\n  if (botInBack) {\n    return;\n  }\n\n  if (bot.xp < Bot.DEFAULT_XP * CLONE_RATE) {\n    return;\n  }\n\n  // Old bot lost half xp\n  bot.xp /= 2;\n\n  // New bot stays behind old, has default XP\n  const newBot = Bot.cloneBot(\n    bot,\n    {\n      ...position,\n      id: Bot.generateId(),\n      direction: turn(bot.direction),\n      xp: Bot.DEFAULT_XP,\n    },\n  );\n\n  addBot(newBot.x, newBot.y, newBot, world.map);\n}\n\nexport default {\n  execute,\n};\n","import { isProcessing } from '../bot';\nimport { eachNeighborBot } from '../world/bot_finder';\n\nconst xpReduction = (neighbors) => neighbors / 3;\n\nfunction execute(bot, world) {\n  let neighbors = 0;\n\n  eachNeighborBot(bot, world, (_) => {\n    neighbors += 1;\n  }, isProcessing);\n\n  bot.xp -= xpReduction(neighbors);\n}\n\nexport default {\n  execute,\n};\n","import { OPERATIONS } from '../program/constants';\nimport Move from './move';\nimport RotateClockwise from './rotate_clockwise';\nimport RotateCounterclockwise from './rotate_counterclockwise';\nimport Eat from './eat';\nimport EatSolar from './eat_solar';\nimport Clone from './clone';\nimport Overpopulation from './overpopulation';\n\n// Generates random operations sequence\nfunction rand() {\n  const items = [\n    OPERATIONS.MOVE,\n    OPERATIONS.ROTATE_CLOCKWISE,\n    OPERATIONS.ROTATE_COUNTERCLOCKWISE,\n    OPERATIONS.EAT,\n    OPERATIONS.EAT_SOLAR,\n    OPERATIONS.CLONE,\n    OPERATIONS.OVERPOPULATION,\n    // OPERATIONS.KILL_NEIGHBORS,\n  ];\n\n  // if (Math.random() > 0.99) {\n  // items.push(OPERATIONS.CLONE);\n  // }\n\n  return items[Math.floor(Math.random() * items.length)];\n}\n\nfunction execute(bot, world) {\n  if (bot.processing === true) {\n    return;\n  }\n\n  bot.processing = true;\n  // debug(bot);\n\n  const commands = {\n    [OPERATIONS.MOVE]: Move,\n    [OPERATIONS.ROTATE_CLOCKWISE]: RotateClockwise,\n    [OPERATIONS.ROTATE_COUNTERCLOCKWISE]: RotateCounterclockwise,\n    [OPERATIONS.EAT]: Eat,\n    [OPERATIONS.EAT_SOLAR]: EatSolar,\n    [OPERATIONS.CLONE]: Clone,\n    [OPERATIONS.OVERPOPULATION]: Overpopulation,\n    // [OPERATIONS.KILL_NEIGHBORS]: CommandKillNeighbors,\n  };\n\n  // const operation = bot.program.commands.shift();\n  // if (operation === undefined) { return; }\n  // bot.program.commands.push(operation);\n\n  if (bot.program.current >= bot.program.commands.length) {\n    bot.program.current = bot.program.commands.length - 1;\n  }\n\n  const operation = bot.program.commands[bot.program.current];\n  if (operation === undefined) {\n    return;\n  }\n\n  bot.program.current += 1;\n  if (bot.program.current >= bot.program.commands.length) {\n    bot.program.current = 0;\n  }\n\n  commands[operation].execute(bot, world);\n\n  if (operation === OPERATIONS.EAT_SOLAR) {\n    Overpopulation.execute(bot, world);\n  }\n}\n\nexport default {\n  execute,\n  rand,\n};\n","import Command from '../command';\n\nconst PROGRAM_LENGTH = 10;\n\nfunction generate() {\n  const commands = [];\n  // Create program with PROGRAM_LENGTH commands\n  for (let i = 0; i < PROGRAM_LENGTH; i += 1) {\n    commands.push(Command.rand());\n  }\n\n  return {\n    commands,\n    current: 0,\n  };\n}\n\nfunction step(bot, world) {\n  Command.execute(bot, world);\n}\n\nexport {\n  generate,\n  step,\n};\n","import {\n  generateRandom as botGenerateRandom,\n  liveStep as botLiveStep,\n  tryDie,\n} from './bot';\nimport { add as addResource, generateRandom as generateRandomResource } from './resource';\nimport { mutate } from './mutation';\nimport { generate, step as programStep } from './program';\nimport { HEIGHT, WIDTH } from './world/constants';\nimport { getBot } from './world/bot_finder';\nimport { addBot } from './world/map_modifier';\n\n/**\n * Bot has 4 directions: right, up, left, down. Direction stored as code:\n * right - 0, up - 1, left - 2, down - 3. It is angle of rotation counterclockwise divided by 90.\n */\n\nfunction eachCell(world, performer) {\n  for (let x = 0; x < WIDTH; x += 1) {\n    for (let y = 0; y < HEIGHT; y += 1) {\n      performer(x, y);\n    }\n  }\n}\n\nfunction eachBot(world, performer) {\n  eachCell(world, (x, y) => {\n    const bot = getBot(x, y, world.map);\n    if (bot) {\n      performer(bot);\n    }\n  });\n}\n\nfunction populate(world) {\n  eachCell(world, (x, y) => {\n    if (Math.random() > 0.90) {\n      addBot(x, y, botGenerateRandom(x, y, generate), world.map);\n    }\n  });\n}\n\nfunction flushBotsProcessing(world) {\n  // Bots perform sequentially, cell by cell, so if bot perform in one cell and moved to other\n  // cell, it can lead to repeated performing. On the world step we mark bot as processing and\n  // bot will not performed again on this step. After processing bots we should flush bots\n  // locks.\n  eachBot(world, (bot) => {\n    bot.processing = false;\n  });\n}\n\nfunction initCell(x, y, map, value = { resources: {} }) {\n  if (map[x] === undefined) {\n    map[x] = [];\n  }\n\n  map[x][y] = value;\n}\n\n// function destroyBot(bot, world) {\n//   delete world.getCell(bot.x, bot.y).bot;\n// }\n\n/* PRIVATE */\nfunction initCells(world) {\n  eachCell(world, (x, y) => {\n    initCell(x, y, world.map);\n  });\n}\n\nfunction initResources(world) {\n  eachCell(world, (x, y) => {\n    if (Math.random() > 0.9) {\n      const resource = generateRandomResource();\n      addResource(x, y, resource, world.map);\n    }\n    const resourceLight = { light: { type: 'light', power: 1 - y / HEIGHT } };\n    addResource(x, y, resourceLight, world.map);\n  });\n}\n\nfunction step(world) {\n  // localStorage.world = JSON.stringify(this.map);\n\n  // Perform next action for every Bot\n  eachBot(world, (bot) => {\n    mutate(bot);\n    programStep(bot, world);\n    botLiveStep(bot);\n\n    const onDie = (deadBot, map) => {\n      // if (Math.random() > 0.3) {\n      const resource = generateRandomResource();\n      addResource(deadBot.x, deadBot.y, resource, map);\n      // }\n    };\n    tryDie(bot, world, onDie);\n  });\n  // debug(this.map[0][0].resources);\n\n  flushBotsProcessing(world);\n}\n\n// print() {\n//   let s = '';\n//   for (let y = 0; y < this.height; y += 1) {\n//     for (let x = 0; x < this.width; x += 1) {\n//       s += this.map[x][y].bot ? 1 : '.';\n//     }\n//     s += '\\n';\n//   }\n//   debug(s);\n// }\n\n// Creates world with population\nfunction createWorld() {\n  // Create world as matrix\n  const world = {\n    map: [],\n  };\n  initCells(world);\n\n  // Create bots in world\n  populate(world);\n  initResources(world);\n\n  window.debugWorld = world;\n  return world;\n}\n\nexport {\n  WIDTH,\n  HEIGHT,\n  createWorld,\n  eachBot,\n  eachCell,\n  getBot,\n  populate,\n  step,\n};\n","import {\n  eachBot, eachCell, HEIGHT, WIDTH,\n} from './domain/world';\nimport Bot from './domain/bot';\nimport { getCell } from './domain/world/map_modifier';\n\n/* accepts parameters\n * h  Object = {h:x, s:y, v:z}\n * OR\n * h, s, v\n * https://stackoverflow.com/questions/17242144/javascript-convert-hsb-hsv-color-to-rgb-accurately\n*/\nfunction HSVtoRGB(h, s, v) {\n  let r; let g; let b;\n  if (arguments.length === 1) {\n    s = h.s; v = h.v; h = h.h;\n  }\n  const i = Math.floor(h * 6);\n  const f = h * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  switch (i % 6) { // eslint-disable-line default-case\n    case 0: r = v; g = t; b = p; break;\n    case 1: r = q; g = v; b = p; break;\n    case 2: r = p; g = v; b = t; break;\n    case 3: r = p; g = q; b = v; break;\n    case 4: r = t; g = p; b = v; break;\n    case 5: r = v; g = p; b = q; break;\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  };\n}\n\nconst inMouth = (x, y, mouth) => x >= mouth[0] && x <= mouth[2] && y >= mouth[1] && y <= mouth[3];\n\nclass Drawer {\n  constructor(world) {\n    this.world = world;\n\n    this.size = 10; // size of shulker\n\n    const canvas = document.getElementById('cnv');\n    this.ctx = canvas.getContext('2d');\n    this.ctx.imageSmoothingEnabled = false;\n    canvas.width = WIDTH * this.size;\n    canvas.height = HEIGHT * this.size;\n  }\n\n  redraw() {\n    const imageData = this.ctx.createImageData(WIDTH * this.size, HEIGHT * this.size);\n\n    // Fill entire canvas with black\n    for (let i = 0; i < WIDTH * this.size * HEIGHT * this.size * 4; i += 4) {\n      imageData.data[i] = 0;\n      imageData.data[i + 1] = 0;\n      imageData.data[i + 2] = 0;\n      imageData.data[i + 3] = 255;\n    }\n\n    // Draw resources\n    eachCell(this.world, (x, y) => {\n      const cell = getCell(x, y, this.world.map);\n      if (cell.resources) {\n        this.drawResource(x, y, cell.resources, imageData);\n      }\n    });\n\n    // Draw bots\n    eachBot(this.world, (bot) => {\n      this.drawBot(bot, imageData);\n    });\n\n    // Display data on canvas\n    this.ctx.putImageData(imageData, 0, 0);\n  }\n\n  drawResource(x, y, resources, imageData) {\n    if (resources.food) {\n      x *= this.size;\n      y *= this.size;\n      // const color = Math.random() > 0.5 ? { r: 140, g: 80, b: 0 } : { r: 0, g: 80, b: 0 };\n      const color = { r: 140, g: 80, b: 0 };\n      this.writeImageDataResource(x, y, color, imageData);\n    }\n  }\n\n  writeImageDataResource(vx, vy, color, imageData) {\n    for (let x = vx + 3; x < vx + this.size - 3; x += 1) {\n      for (let y = vy + 3; y < vy + this.size - 3; y += 1) {\n        this.writeImageDataPixel(x, y, color, imageData);\n      }\n    }\n  }\n\n  // Generates color depending on program\n  getColor(bot) {\n    const dots = [\n      0,\n      0.15,\n      0.3,\n      0.45,\n      0.6,\n      0.75,\n      0.9,\n    ];\n\n    const weights = bot.program.commands.map((operation) => dots[operation]);\n\n    const sum = weights.reduce((a, b) => a + b, 0);\n    const avg = (sum / weights.length) || 0;\n\n    return HSVtoRGB(bot.style.h, bot.style.s, avg);\n\n    // if (bot.options.hasBotInFront) {\n    // color = { r: 255, g: 0, b: 0 };\n    // } else {\n    // Bot becomes dark if hungry\n\n    // const g = 128 + parseInt(parseFloat(bot.id) * 128);\n\n    // color = { r: 0, g: g, b: 100 };\n    // color = HSVtoRGB(bot.style.h, bot.style.s, bot.style.v);\n    // color = {r: bot.style.h * 255, g: bot.style.s * 255, b: bot.style.v * 255}\n\n    // }\n    // bot = this.setColor(bot);\n  }\n\n  drawBot(bot, imageData) {\n    const color = this.getColor(bot);\n    const x = bot.x * this.size;\n    const y = bot.y * this.size;\n    this.writeImageDataBot(x, y, bot, bot.direction, color, imageData);\n  }\n\n  setColor(bot) {\n    return bot;\n  }\n\n  /**\n   *  Bot structure\n   *  - main body (X)\n   *  - borders (b)\n   *\n   *  bbbbbbbb\n   * bXXXXXXXXb\n   * bXXXXXXXXb\n   * bXXXXXXX\n   * bXXXXXXX  <- mouth\n   * bXXXXXXX\n   * bXXXXXXX\n   * bXXXXXXXXb\n   * bXXXXXXXXb\n   *  bbbbbbbb\n   *\n   * @param vx\n   * @param vy\n   * @param bot\n   * @param direction\n   * @param color\n   * @param imageData\n   */\n  writeImageDataBot(vx, vy, bot, direction, color, imageData) {\n    const mainBodyLeftX = vx + 1;\n    const mainBodyRightX = vx + this.size - 2;\n    const mainBodyTopY = vy + 1;\n    const mainBodyBottomY = vy + this.size - 2;\n\n    const botLeftX = vx;\n    const botRightX = vx + this.size - 1;\n    const botTopY = vy;\n    const botBottomY = vy + this.size - 1;\n\n    const mouthMargin = 4;\n    const mouthDepth = 1;\n\n    const mouth = {\n      [Bot.RIGHT]: [\n        botRightX - mouthDepth,\n        botTopY + mouthMargin,\n        botRightX,\n        botBottomY - mouthMargin,\n      ],\n      [Bot.TOP]: [\n        botLeftX + mouthMargin,\n        botTopY,\n        botRightX - mouthMargin,\n        botTopY + mouthDepth,\n      ],\n      [Bot.LEFT]: [\n        botLeftX,\n        botTopY + mouthMargin,\n        botLeftX + mouthDepth,\n        botBottomY - mouthMargin,\n      ],\n      [Bot.BOTTOM]: [\n        botLeftX + mouthMargin,\n        botBottomY - mouthDepth,\n        botRightX - mouthMargin,\n        botBottomY,\n      ],\n    };\n\n    const lmouth = mouth[direction];\n\n    for (let y = mainBodyTopY; y <= mainBodyBottomY; y += 1) {\n      // Left border\n      if (!inMouth(botLeftX, y, lmouth)) {\n        this.writeImageDataPixel(botLeftX, y, color, imageData);\n      }\n\n      // Right border\n      if (!inMouth(botRightX, y, lmouth)) {\n        this.writeImageDataPixel(botRightX, y, color, imageData);\n      }\n    }\n\n    for (let x = mainBodyLeftX; x <= mainBodyRightX; x += 1) {\n      // Top border\n      if (!inMouth(x, botTopY, lmouth)) {\n        this.writeImageDataPixel(x, botTopY, color, imageData); // {r: 255, g: 255, b: 255}\n      }\n\n      // Bottom border\n      if (!inMouth(x, botBottomY, lmouth)) {\n        this.writeImageDataPixel(x, botBottomY, color, imageData);\n      }\n    }\n\n    for (let x = mainBodyLeftX; x <= mainBodyRightX; x += 1) {\n      for (let y = mainBodyTopY; y <= mainBodyBottomY; y += 1) {\n        if (!inMouth(x, y, lmouth)) {\n          this.writeImageDataPixel(x, y, color, imageData);\n        }\n      }\n    }\n\n    // this.drawMouth(vx, vy, direction, imageData);\n  }\n\n  writeImageDataPixel(x, y, color, imageData) {\n    let index = y * WIDTH * this.size * 4 + x * 4;\n    imageData.data[index] = color.r;\n    index += 1;\n    imageData.data[index] = color.g;\n    index += 1;\n    imageData.data[index] = color.b;\n    index += 1;\n    imageData.data[index] = color.a === undefined ? 255 : color.a;\n  }\n}\n\nexport {\n  Drawer,\n};\n","import { HEIGHT, WIDTH } from './domain/world/constants';\nimport { getBot } from './domain/world/bot_finder';\n\nconst debugOptions = {};\nlet world;\nlet counter = 0;\n\n// global vars for this module\nconst cnv = document.getElementById('cnv');\nconst info = document.getElementById('info');\nconst botWidth = cnv.clientWidth / WIDTH;\nconst botHeight = cnv.clientHeight / HEIGHT;\n\nconst updateDebugOptions = () => {\n  if (debugOptions.botX === undefined) return;\n  if (debugOptions.botY === undefined) return;\n  debugOptions.bot = getBot(debugOptions.botX, debugOptions.botY, world.map);\n};\n\nconst handleClick = (e) => {\n  debugOptions.botX = parseInt(e.x / botWidth, 10);\n  debugOptions.botY = parseInt(e.y / botHeight, 10);\n  updateDebugOptions();\n};\n\nfunction updateDebugWindow() {\n  const { bot } = debugOptions;\n  // When bot dies we should load new info\n  if (bot === undefined || (bot && bot.xp <= 0)) {\n    updateDebugOptions();\n    return;\n  }\n\n  info.innerHTML = `x: ${bot.x}</br>`\n    + `y: ${bot.y}</br>`\n    + `xp: ${parseInt(bot.xp, 10)}</br>`\n    + `program: ${bot.program.commands}</br>`\n    + `id: ${bot.id}</br>`;\n}\n\nfunction initDebugWindow(worldObject) {\n  world = worldObject;\n  cnv.addEventListener('mousedown', handleClick);\n\n  setInterval(updateDebugWindow, 1000);\n}\n\nfunction onTick(times) {\n  counter += 1;\n  window.debugInfo1 = `${counter} ${Date.now()} perf: ${times[0]}, ${times[1]} milliseconds`;\n}\n\nexport {\n  initDebugWindow,\n  onTick,\n};\n","import { Drawer } from './drawer';\nimport { createWorld, step as worldStep } from './domain/world';\nimport { initDebugWindow, onTick } from './debug_window';\n\nlet redraw;\n\nfunction debugPerformance(performer, param = undefined) {\n  const time = performance.now();\n  performer(param);\n  return performance.now() - time;\n}\n\nfunction step(world) {\n  const t0 = debugPerformance(worldStep, world);\n  const t1 = debugPerformance(redraw);\n  // Print performance debug information\n  onTick([t0, t1]);\n\n  requestAnimationFrame(() => step(world));\n}\n\nfunction run(world, drawer) {\n  // worldStep = world.step.bind(world);\n  redraw = drawer.redraw.bind(drawer);\n\n  // this.stepBusinessLogic();\n\n  requestAnimationFrame(() => step(world));\n\n  setInterval(() => {\n    console.log(Date.now(), window.debugInfo1); // eslint-disable-line no-console\n  }, 1000);\n\n  initDebugWindow(world);\n}\n\nfunction perform() {\n  const world = createWorld();\n  const drawer = new Drawer(world);\n  run(world, drawer);\n}\n\nfunction debug(msg) {\n  console.log(msg); // eslint-disable-line no-console\n}\n\n// stepBusinessLogic() {\n//   return new Promise((resolve, _) => {\n//     this.world.step();\n//     this.drawer.redraw();\n//     resolve();\n//   }).then((res) => {\n//     this.stepBusinessLogic();\n//   });\n// }\n\n// stepRedraw() {\n//\n// }\n\nexport default {\n  debug,\n  perform,\n};\n","import App from './app';\n\nApp.perform();\n"],"names":["WIDTH","HEIGHT","normalizeCoords","x","y","SHIFTS","getBot","map","bot","rightCyclicShift","ar","push","shift","removeBot","addBot","Error","validateCoords","getCell","DEFAULT_BOT","direction","id","rotate","program","commands","current","options","xp","style","h","s","b","isProcessing","processing","generateId","Math","random","generateRandom","generateProgram","floor","v","liveStep","tryDie","world","onDie","cloneBot","changes","undefined","slice","RIGHT","TOP","LEFT","BOTTOM","DEFAULT_XP","add","resource","resources","OPERATIONS","MOVE","CLONE","EAT","EAT_SOLAR","ROTATE_CLOCKWISE","ROTATE_COUNTERCLOCKWISE","OVERPOPULATION","arRandom","array","length","randomOperationCode","Object","values","randomChangeStyleComponent","value","change","maxComponentValue","sign","execute","position","frontPosition","hasBotInFront","dest","setCellProps","moveBot","_world","cell","food","light","power","backPosition","newBot","neighbors","performer","botIsProcessing","coords","neighborBot","eachNeighborBot","xpReduction","operation","items","generate","i","eachCell","eachBot","mutations","mutateSubstitution","splice","mutateDeletion","mutateInsertion","mutate","deadBot","type","flushBotsProcessing","inMouth","mouth","Drawer","constructor","this","size","canvas","document","getElementById","ctx","getContext","imageSmoothingEnabled","width","height","redraw","imageData","createImageData","data","drawResource","drawBot","putImageData","color","r","g","writeImageDataResource","vx","vy","writeImageDataPixel","getColor","dots","weights","avg","reduce","a","arguments","f","p","q","t","round","HSVtoRGB","writeImageDataBot","setColor","mainBodyLeftX","mainBodyRightX","mainBodyTopY","mainBodyBottomY","botLeftX","botRightX","botTopY","botBottomY","lmouth","index","debugOptions","counter","cnv","info","botWidth","clientWidth","botHeight","clientHeight","updateDebugOptions","botX","botY","handleClick","e","parseInt","updateDebugWindow","innerHTML","initDebugWindow","worldObject","addEventListener","setInterval","debugPerformance","param","time","performance","now","times","window","debugInfo1","Date","requestAnimationFrame","initCell","initCells","populate","initResources","debugWorld","createWorld","drawer","bind","console","log","run"],"sourceRoot":""}