{"version":3,"file":"main.js","mappings":"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","sources":["webpack://evo-3/./src/domain/world/constants.js","webpack://evo-3/./src/domain/world/coords.js","webpack://evo-3/./src/domain/world/bot_finder.js","webpack://evo-3/./src/domain/world/map_modifier.js","webpack://evo-3/./src/domain/bot.js","webpack://evo-3/./src/domain/resource.js","webpack://evo-3/./src/domain/program/constants.js","webpack://evo-3/./src/utils.js","webpack://evo-3/./src/domain/mutation.js","webpack://evo-3/./src/domain/command/move.js","webpack://evo-3/./src/domain/command/rotate_clockwise.js","webpack://evo-3/./src/domain/command/rotate_counterclockwise.js","webpack://evo-3/./src/domain/command/eat.js","webpack://evo-3/./src/domain/command/eat_solar.js","webpack://evo-3/./src/domain/command/clone.js","webpack://evo-3/./src/domain/command/overpopulation.js","webpack://evo-3/./src/domain/command/index.js","webpack://evo-3/./src/domain/program/program.js","webpack://evo-3/./src/domain/world.js","webpack://evo-3/./src/drawer.js","webpack://evo-3/./src/debug_window.js","webpack://evo-3/./src/app.js","webpack://evo-3/./src/main.js"],"sourcesContent":["const WIDTH = 150;\nconst HEIGHT = 80;\n\nexport {\n  WIDTH,\n  HEIGHT,\n};\n","import { HEIGHT, WIDTH } from './constants';\n\nfunction normalizeCoords(x, y) {\n  if (x < 0) x = WIDTH - 1;\n  if (x > WIDTH - 1) x = 0;\n  if (y < 0) y = HEIGHT - 1;\n  if (y > HEIGHT - 1) y = 0;\n\n  return { x, y };\n}\n\nconst validateCoords = (x, y) => {\n  if (x >= WIDTH || x < 0) {\n    throw new Error(`x should be from 0 to ${WIDTH}`);\n  }\n\n  if (y >= HEIGHT || y < 0) {\n    throw new Error(`x should be from 0 to ${WIDTH}`);\n  }\n};\n\nexport {\n  normalizeCoords,\n  validateCoords,\n};\n","// Returns coordinates behind the back of the bot\n// Returns coordinates behind the back of the bot\nimport { normalizeCoords } from './coords';\n\n//              left    top      right    bottom\nconst SHIFTS = [[1, 0], [0, -1], [-1, 0], [0, 1]];\n\nconst getBot = (x, y, map) => map && map[x] && map[x][y] && map[x][y].bot;\n\nfunction rightCyclicShift(ar) {\n  // Mutates ar for performance purposes\n  ar.push(ar.shift());\n  return ar;\n}\n\nfunction frontPosition(bot) {\n  const shift = SHIFTS[bot.direction];\n  return normalizeCoords(bot.x + shift[0], bot.y + shift[1]);\n}\n\nfunction backPosition(bot) {\n  const shift = rightCyclicShift(rightCyclicShift(SHIFTS))[bot.direction];\n  return normalizeCoords(bot.x + shift[0], bot.y + shift[1]);\n}\n\n// function aheadBotByBot(bot, world) {\n//   const position = frontPosition(bot);\n//   return aheadBotByPosition(position, world);\n// }\n\n// const aheadBotByPosition = (position, world) => {\n//   getBot(position.x, position.y, world.map);\n// };\n// const behindBotByPosition = (position, world) => getBot(position.x, position.y, world.map);\n\n// function getBehindBot(bot, world) {\n//   const position = backPosition(bot);\n// }\n\nfunction eachNeighborBot(bot, world, performer, botIsProcessing) {\n  for (let x = -1; x <= 1; x += 1) {\n    for (let y = -1; y <= 1; y += 1) {\n      if (x !== 0 && y !== 0) {\n        const coords = normalizeCoords(bot.x + x, bot.y + y);\n        const neighborBot = getBot(coords.x, coords.y, world.map);\n        if (neighborBot && botIsProcessing(neighborBot)) {\n          performer(neighborBot);\n        }\n      }\n    }\n  }\n}\n\nexport {\n  eachNeighborBot,\n  backPosition,\n  frontPosition,\n  //  aheadBotByPosition,\n  getBot,\n};\n","import { getBot } from './bot_finder';\nimport { validateCoords } from './coords';\n\nconst setCellProps = (x, y, value, map) => {\n  map[x][y] = { ...map[x][y], ...value };\n  return map;\n};\n\nconst removeBot = (x, y, map) => {\n  delete map[x][y].bot;\n  return map;\n};\n\nfunction moveBot(bot, dest, map) {\n  if (getBot(dest.x, dest.y, map)) {\n    throw new Error(`Bot in cell ${dest.x}:${dest.y} already exists`);\n  }\n  // Write moved bot to new cell and remove this bot from old cell\n  setCellProps(dest.x, dest.y, { bot }, map);\n  removeBot(bot.x, bot.y, map);\n  bot.x = dest.x;\n  bot.y = dest.y;\n}\n\nfunction addBot(x, y, bot, map) {\n  validateCoords(x, y);\n\n  if (map[x][y].bot) {\n    throw new Error(`Bot already exists in cell ${x}:${y}`);\n  }\n  // debug('addBot');\n  map[x][y].bot = bot;\n\n  return map;\n}\n\nfunction getCell(x, y, map) {\n  return map[x][y];\n}\n\nexport {\n  addBot,\n  getCell,\n  moveBot,\n  removeBot,\n};\n","import { removeBot } from './world/map_modifier';\n\nconst DEFAULT_BOT = {\n  x: 0,\n  y: 0,\n  direction: 0,\n  id: null,\n  rotate: 1,\n  program: { commands: [], current: 0 }, // TODO: ссылка на общий объект\n  options: {}, // TODO: ссылка на общий объект\n  xp: 127,\n  style: {\n    h: 1,\n    s: 1,\n    b: 1,\n  },\n};\n\nconst RIGHT = 0;\nconst TOP = 1;\nconst LEFT = 2;\nconst BOTTOM = 3;\nconst DEFAULT_XP = 10;\n\n/*\n* @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\n// function rotate1(direction, rotate) {\n//   return ((direction + rotate) & 3);\n// }\n\n/*\n* @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\n// function rotate2(direction, rotate) {\n//   return ((direction + rotate) & 3);\n// }\n\n// function rightPosition(bot) {\n//   return World.normalizeCoords(bot.x + 1, bot.y + 0);\n// }\n//\n// function topPosition(bot) {\n//   return World.normalizeCoords(bot.x + 0, bot.y - 1);\n// }\n//\n// function leftPosition(bot) {\n//   return World.normalizeCoords(bot.x - 1, bot.y + 0);\n// }\n//\n// function bottomPosition(bot) {\n//   return World.normalizeCoords(bot.x + 0, bot.y + 1);\n// }\n\nfunction cloneBot(bot, changes = {}) {\n  return {\n    x: changes.x === undefined ? bot.x : changes.x,\n    y: changes.y === undefined ? bot.y : changes.y,\n    id: changes.id === undefined ? bot.id : changes.id,\n    direction: changes.direction === undefined ? bot.direction : changes.direction,\n    xp: changes.xp === undefined ? bot.xp : changes.xp,\n\n    rotate: bot.rotate,\n    program: {\n      commands: bot.program.commands.slice(),\n      current: bot.program.current,\n    },\n    options: { ...bot.options },\n    style: {\n      h: bot.style.h,\n      s: bot.style.s,\n      v: bot.style.v,\n    },\n    processing: bot.processing,\n  };\n}\n\nfunction isProcessing(bot) {\n  return bot.processing === false;\n}\n//\n// function isDirectionRight(bot) {\n//   return bot.direction === 0;\n// }\n//\n// function isDirectionLeft(bot) {\n//   return bot.direction === 2;\n// }\n//\n// function isDirectionTop(bot) {\n//   return bot.direction === 1;\n// }\n//\n// function isDirectionBottom(bot) {\n//   return bot.direction === 3;\n// }\n\nfunction generateId() {\n  return `${Math.random()}`;\n}\n\nfunction generateRandom(x, y, generateProgram) {\n  return {\n    ...DEFAULT_BOT,\n    id: generateId(),\n    x,\n    y,\n    direction: Math.floor(Math.random() * 4),\n    rotate: Math.random() > 0.5 ? 1 : -1,\n    program: generateProgram(),\n    options: {},\n    style: {\n      h: Math.random(),\n      s: Math.random(),\n      v: Math.random(),\n    },\n  };\n}\n\n// tick of the bot live\nfunction liveStep(bot) {\n  bot.xp -= 1;\n}\n\nfunction tryDie(bot, world, onDie) {\n  if (bot.xp <= 0) {\n    removeBot(bot.x, bot.y, world.map);\n    onDie(bot, world.map);\n  }\n}\n\nexport {\n  isProcessing,\n  generateRandom,\n  liveStep,\n  tryDie,\n};\n\nexport default {\n  generateId,\n  generateRandom,\n  liveStep,\n  tryDie,\n  cloneBot,\n  isProcessing,\n  DEFAULT_BOT,\n  RIGHT,\n  TOP,\n  LEFT,\n  BOTTOM,\n  DEFAULT_XP,\n};\n","// import { validateCoords } from './world';\n\nfunction add(x, y, resource, map) {\n  // validateCoords(x, y);\n  map[x][y].resources = {\n    ...map[x][y].resources,\n    ...resource,\n  };\n}\n\nfunction generateRandom() {\n  return {\n    food: {\n      type: 'food',\n    },\n  };\n}\n\nexport {\n  add,\n  generateRandom,\n};\n","const OPERATIONS = {\n  MOVE: 0,\n  CLONE: 1,\n  EAT: 2,\n  EAT_SOLAR: 3,\n  ROTATE_CLOCKWISE: 4,\n  ROTATE_COUNTERCLOCKWISE: 5,\n  // OVERPOPULATION: 6,\n  // KILL_NEIGHBORS: 7,\n};\n\nexport {\n  OPERATIONS,\n};\n","function arRandom(array) {\n  return array[Math.floor((Math.random() * array.length))];\n}\n\nexport {\n  arRandom,\n};\n","import { OPERATIONS } from './program/constants';\n\nimport { arRandom } from '../utils';\n\nconst MUTATION_PROBABILITY = 0.001;\n\nfunction randomOperationCode() {\n  return arRandom(Object.values(OPERATIONS));\n}\n\nfunction randomChangeStyleComponent(value) {\n  // const minComponentValue = 0;\n  const maxComponentValue = 1;\n  const change = maxComponentValue / 100;\n  let sign = Math.random() > 0.5 ? 1 : -1;\n\n  if (value + change * sign <= 0 || value + change * sign >= 1) {\n    sign *= -1;\n  }\n  return value + change * sign;\n}\n\nfunction mutateSubstitution(commands, position) {\n  commands[position] = randomOperationCode();\n  return commands;\n}\n\nfunction mutateDeletion(commands, position) {\n  commands.splice(position, 1);\n  return commands;\n}\n\nfunction mutateInsertion(commands, position) {\n  commands.splice(position, 0, randomOperationCode());\n  return commands;\n}\n\n// function randomOperationsPosition(commands) {\n//   return Math.floor(Math.random() * bot.program.commands.length);\n// }\n\nfunction mutate(bot) {\n  // Mutations are very rare\n  if (Math.random() > MUTATION_PROBABILITY) {\n    return;\n  }\n\n  const mutations = [\n    (commands, position) => mutateSubstitution(commands, position),\n    (commands, position) => mutateDeletion(commands, position),\n    (commands, position) => mutateInsertion(commands, position),\n  ];\n\n  const position = Math.floor(Math.random() * bot.program.commands.length);\n\n  arRandom(mutations)(bot.program.commands, position);\n\n  bot.style.h = randomChangeStyleComponent(bot.style.h);\n  bot.style.s = randomChangeStyleComponent(bot.style.s);\n  bot.style.v = randomChangeStyleComponent(bot.style.v); //  * (bot.xp * 2 / 255)\n\n  // // Substitution\n  // bot.program.commands[position] = randomOperationCode();\n  //\n  // // Deletion\n  // bot.program.commands.splice(position, 1);\n  //\n  // // Insertion\n  // bot.program.commands.splice(position, 0, randomOperationCode());\n}\n\nexport {\n  mutate,\n};\n","import { frontPosition, getBot } from '../world/bot_finder';\nimport { moveBot } from '../world/map_modifier';\n\nfunction execute(bot, world) {\n  const position = frontPosition(bot);\n  bot.options.hasBotInFront = !!getBot(position.x, position.y, world.map);\n\n  if (!bot.options.hasBotInFront) {\n    moveBot(bot, position, world.map);\n  }\n}\n\nexport default {\n  execute,\n};\n","/*\n* @param direction {Number} can be 0 (right), 1 (top), 2 (left), 3 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\nconst rotate = (direction, rotateCounts) => (direction + rotateCounts) & 3;\n\nfunction execute(bot, _world) {\n  bot.direction = rotate(bot.direction, 1);\n}\n\nexport default {\n  execute,\n};\n","/*\n* @param direction {Number} can be 0 (right), 1 (top), 2 (left), 3 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\n// TODO: code duplication with rotate_clockwise.js\nconst rotate = (direction, rotateCounts) => (direction + rotateCounts) & 3;\n\nfunction execute(bot, _world) {\n  bot.direction = rotate(bot.direction, -1);\n}\n\nexport default {\n  execute,\n};\n","import { getCell } from '../world/map_modifier';\n\nfunction execute(bot, world) {\n  const cell = getCell(bot.x, bot.y, world.map);\n  if (cell.resources.food) {\n    bot.xp += 100;\n    if (bot.xp > 255) bot.xp = 255;\n    delete cell.resources.food;\n  }\n}\n\nexport default {\n  execute,\n};\n","import { getCell } from '../world/map_modifier';\n\nfunction execute(bot, world) {\n  const cell = getCell(bot.x, bot.y, world.map);\n\n  bot.xp += cell.resources.light.power * 3;\n}\n\nexport default {\n  execute,\n};\n","import Bot from '../bot';\nimport { backPosition, getBot } from '../world/bot_finder';\nimport { addBot } from '../world/map_modifier';\n\nconst CLONE_RATE = 2;\n\nconst turn = (direction) => (direction + 2) & 3;\n\nfunction execute(bot, world) {\n  const position = backPosition(bot);\n  const botInBack = getBot(position.x, position.y, world.map);\n  if (botInBack) {\n    return;\n  }\n\n  if (bot.xp < Bot.DEFAULT_XP * CLONE_RATE) {\n    return;\n  }\n\n  // Old bot lost half xp\n  bot.xp /= 2;\n\n  // New bot stays behind old, has default XP\n  const newBot = Bot.cloneBot(\n    bot,\n    {\n      ...position,\n      id: Bot.generateId(),\n      direction: turn(bot.direction),\n      xp: Bot.DEFAULT_XP,\n    },\n  );\n\n  addBot(newBot.x, newBot.y, newBot, world.map);\n}\n\nexport default {\n  execute,\n};\n","import { isProcessing } from '../bot';\nimport { eachNeighborBot } from '../world/bot_finder';\n\nconst xpReduction = (neighbors) => neighbors / 3;\n\nfunction execute(bot, world) {\n  return;\n  let neighbors = 0;\n\n  eachNeighborBot(bot, world, (_) => {\n    neighbors += 1;\n  }, isProcessing);\n\n  bot.xp -= xpReduction(neighbors);\n}\n\nexport default {\n  execute,\n};\n","import { OPERATIONS } from '../program/constants';\nimport Move from './move';\nimport RotateClockwise from './rotate_clockwise';\nimport RotateCounterclockwise from './rotate_counterclockwise';\nimport Eat from './eat';\nimport EatSolar from './eat_solar';\nimport Clone from './clone';\nimport Overpopulation from './overpopulation';\n\n// Generates random operations sequence\nfunction rand() {\n  const items = [\n    OPERATIONS.MOVE,\n    OPERATIONS.ROTATE_CLOCKWISE,\n    OPERATIONS.ROTATE_COUNTERCLOCKWISE,\n    OPERATIONS.EAT,\n    OPERATIONS.EAT_SOLAR,\n    OPERATIONS.CLONE,\n    // OPERATIONS.OVERPOPULATION,\n    // OPERATIONS.KILL_NEIGHBORS,\n  ];\n\n  // if (Math.random() > 0.99) {\n  // items.push(OPERATIONS.CLONE);\n  // }\n\n  return items[Math.floor(Math.random() * items.length)];\n}\n\nfunction execute(bot, world) {\n  if (bot.processing === true) {\n    return;\n  }\n\n  bot.processing = true;\n  // debug(bot);\n\n  const commands = {\n    [OPERATIONS.MOVE]: Move,\n    [OPERATIONS.ROTATE_CLOCKWISE]: RotateClockwise,\n    [OPERATIONS.ROTATE_COUNTERCLOCKWISE]: RotateCounterclockwise,\n    [OPERATIONS.EAT]: Eat,\n    [OPERATIONS.EAT_SOLAR]: EatSolar,\n    [OPERATIONS.CLONE]: Clone,\n    // [OPERATIONS.OVERPOPULATION]: Overpopulation,\n    // [OPERATIONS.KILL_NEIGHBORS]: CommandKillNeighbors,\n  };\n\n  // const operation = bot.program.commands.shift();\n  // if (operation === undefined) { return; }\n  // bot.program.commands.push(operation);\n\n  if (bot.program.current >= bot.program.commands.length) {\n    bot.program.current = bot.program.commands.length - 1;\n  }\n\n  const operation = bot.program.commands[bot.program.current];\n  if (operation === undefined) {\n    return;\n  }\n\n  bot.program.current += 1;\n  if (bot.program.current >= bot.program.commands.length) {\n    bot.program.current = 0;\n  }\n\n  commands[operation].execute(bot, world);\n\n  if (operation === OPERATIONS.EAT_SOLAR) {\n    Overpopulation.execute(bot, world);\n  }\n}\n\nexport default {\n  execute,\n  rand,\n};\n","import Command from '../command';\n\nconst PROGRAM_LENGTH = 10;\n\nfunction generate() {\n  const commands = [];\n  // Create program with PROGRAM_LENGTH commands\n  for (let i = 0; i < PROGRAM_LENGTH; i += 1) {\n    commands.push(Command.rand());\n  }\n\n  return {\n    commands,\n    current: 0,\n  };\n}\n\nfunction step(bot, world) {\n  Command.execute(bot, world);\n}\n\nexport {\n  generate,\n  step,\n};\n","import {\n  generateRandom as botGenerateRandom,\n  liveStep as botLiveStep,\n  tryDie,\n} from './bot';\nimport { add as addResource, generateRandom as generateRandomResource } from './resource';\nimport { mutate } from './mutation';\nimport { generate, step as programStep } from './program';\nimport { HEIGHT, WIDTH } from './world/constants';\nimport { getBot } from './world/bot_finder';\nimport { addBot } from './world/map_modifier';\n\n/**\n * Bot has 4 directions: right, up, left, down. Direction stored as code:\n * right - 0, up - 1, left - 2, down - 3. It is angle of rotation counterclockwise divided by 90.\n */\n\nfunction eachCell(world, performer) {\n  for (let x = 0; x < WIDTH; x += 1) {\n    for (let y = 0; y < HEIGHT; y += 1) {\n      performer(x, y);\n    }\n  }\n}\n\nfunction eachBot(world, performer, options) {\n  eachCell(world, (x, y) => {\n    const bot = getBot(x, y, world.map);\n    if (bot) {\n      performer(bot, options);\n    }\n  });\n}\n\nfunction populate(world) {\n  eachCell(world, (x, y) => {\n    if (Math.random() > 0.90) {\n      addBot(x, y, botGenerateRandom(x, y, generate), world.map);\n    }\n  });\n}\n\nfunction flushBotsProcessing(world) {\n  // Bots perform sequentially, cell by cell, so if bot perform in one cell and moved to other\n  // cell, it can lead to repeated performing. On the world step we mark bot as processing and\n  // bot will not performed again on this step. After processing bots we should flush bots\n  // locks.\n  eachBot(world, (bot) => {\n    bot.processing = false;\n  });\n}\n\nfunction initCell(x, y, map, value = { resources: {} }) {\n  if (map[x] === undefined) {\n    map[x] = [];\n  }\n\n  map[x][y] = value;\n}\n\n// function destroyBot(bot, world) {\n//   delete world.getCell(bot.x, bot.y).bot;\n// }\n\n/* PRIVATE */\nfunction initCells(world) {\n  eachCell(world, (x, y) => {\n    initCell(x, y, world.map);\n  });\n}\n\nfunction initResources(world) {\n  eachCell(world, (x, y) => {\n    if (Math.random() > 0.9) {\n      const resource = generateRandomResource();\n      addResource(x, y, resource, world.map);\n    }\n    const resourceLight = { light: { type: 'light', power: 1 - y / HEIGHT } };\n    addResource(x, y, resourceLight, world.map);\n  });\n}\n\nfunction step(world) {\n  // localStorage.world = JSON.stringify(this.map);\n\n  // Perform next action for every Bot\n  eachBot(world, (bot) => {\n    mutate(bot);\n    programStep(bot, world);\n    botLiveStep(bot);\n\n    const onDie = (deadBot, map) => {\n      // if (Math.random() > 0.3) {\n      const resource = generateRandomResource();\n      addResource(deadBot.x, deadBot.y, resource, map);\n      // }\n    };\n    tryDie(bot, world, onDie);\n  });\n  // debug(this.map[0][0].resources);\n\n  flushBotsProcessing(world);\n}\n\n// print() {\n//   let s = '';\n//   for (let y = 0; y < this.height; y += 1) {\n//     for (let x = 0; x < this.width; x += 1) {\n//       s += this.map[x][y].bot ? 1 : '.';\n//     }\n//     s += '\\n';\n//   }\n//   debug(s);\n// }\n\n// Creates world with population\nfunction createWorld() {\n  // Create world as matrix\n  const world = {\n    map: [],\n  };\n  initCells(world);\n\n  // Create bots in world\n  populate(world);\n  initResources(world);\n\n  window.debugWorld = world;\n  return world;\n}\n\nexport {\n  WIDTH,\n  HEIGHT,\n  createWorld,\n  eachBot,\n  eachCell,\n  getBot,\n  populate,\n  step,\n};\n","import {\n  eachBot, eachCell, HEIGHT, WIDTH,\n} from './domain/world';\nimport Bot from './domain/bot';\nimport { getCell } from './domain/world/map_modifier';\n\n/* accepts parameters\n * h  Object = {h:x, s:y, v:z}\n * OR\n * h, s, v\n * https://stackoverflow.com/questions/17242144/javascript-convert-hsb-hsv-color-to-rgb-accurately\n*/\nfunction HSVtoRGB(h, s, v) {\n  let r; let g; let b;\n  if (arguments.length === 1) {\n    s = h.s; v = h.v; h = h.h;\n  }\n  const i = Math.floor(h * 6);\n  const f = h * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  switch (i % 6) { // eslint-disable-line default-case\n    case 0: r = v; g = t; b = p; break;\n    case 1: r = q; g = v; b = p; break;\n    case 2: r = p; g = v; b = t; break;\n    case 3: r = p; g = q; b = v; break;\n    case 4: r = t; g = p; b = v; break;\n    case 5: r = v; g = p; b = q; break;\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  };\n}\n\nconst inMouth = (x, y, mouth) => x >= mouth[0] && x <= mouth[2] && y >= mouth[1] && y <= mouth[3];\n\nconst CELL_SIZE = 10;\n\n// Generates color depending on program\nfunction getColor(bot) {\n  const dots = [\n    0,\n    0.15,\n    0.3,\n    0.45,\n    0.6,\n    0.75,\n    0.9,\n  ];\n\n  const weights = bot.program.commands.map((operation) => dots[operation]);\n\n  const sum = weights.reduce((a, b) => a + b, 0);\n  const avg = (sum / weights.length) || 0;\n\n  return HSVtoRGB(bot.style.h, bot.style.s, avg);\n\n  // if (bot.options.hasBotInFront) {\n  // color = { r: 255, g: 0, b: 0 };\n  // } else {\n  // Bot becomes dark if hungry\n\n  // const g = 128 + parseInt(parseFloat(bot.id) * 128);\n\n  // color = { r: 0, g: g, b: 100 };\n  // color = HSVtoRGB(bot.style.h, bot.style.s, bot.style.v);\n  // color = {r: bot.style.h * 255, g: bot.style.s * 255, b: bot.style.v * 255}\n\n  // }\n  // bot = this.setColor(bot);\n}\n\nfunction writeImageDataPixel(x, y, color, imageData) {\n  let index = y * WIDTH * CELL_SIZE * 4 + x * 4;\n  imageData.data[index] = color.r;\n  index += 1;\n  imageData.data[index] = color.g;\n  index += 1;\n  imageData.data[index] = color.b;\n  index += 1;\n  imageData.data[index] = color.a === undefined ? 255 : color.a;\n}\n\nfunction writeCenter(mainBodyLeftX, mainBodyRightX, mainBodyTopY, mainBodyBottomY, lmouth, color, imageData) {\n  for (let x = mainBodyLeftX; x <= mainBodyRightX; x += 1) {\n    for (let y = mainBodyTopY; y <= mainBodyBottomY; y += 1) {\n      if (!inMouth(x, y, lmouth)) {\n        writeImageDataPixel(x, y, color, imageData);\n      }\n    }\n  }\n}\n\nfunction writeTopBottom(mainBodyLeftX, mainBodyRightX, botTopY, lmouth, color, imageData, botBottomY) {\n  for (let x = mainBodyLeftX; x <= mainBodyRightX; x += 1) {\n    // Top border\n    if (!inMouth(x, botTopY, lmouth)) {\n      writeImageDataPixel(x, botTopY, color, imageData); // {r: 255, g: 255, b: 255}\n    }\n\n    // Bottom border\n    if (!inMouth(x, botBottomY, lmouth)) {\n      writeImageDataPixel(x, botBottomY, color, imageData);\n    }\n  }\n}\n\nfunction writeLeftRight(mainBodyTopY, mainBodyBottomY, botLeftX, lmouth, color, imageData, botRightX) {\n  for (let y = mainBodyTopY; y <= mainBodyBottomY; y += 1) {\n    // Left border\n    if (!inMouth(botLeftX, y, lmouth)) {\n      writeImageDataPixel(botLeftX, y, color, imageData);\n    }\n\n    // Right border\n    if (!inMouth(botRightX, y, lmouth)) {\n      writeImageDataPixel(botRightX, y, color, imageData);\n    }\n  }\n}\n\n/**\n *  Bot structure\n *  - main body (X)\n *  - borders (b)\n *\n *  bbbbbbbb\n * bXXXXXXXXb\n * bXXXXXXXXb\n * bXXXXXXX\n * bXXXXXXX  <- mouth\n * bXXXXXXX\n * bXXXXXXX\n * bXXXXXXXXb\n * bXXXXXXXXb\n *  bbbbbbbb\n *\n * @param vx\n * @param vy\n * @param bot\n * @param direction\n * @param color\n * @param imageData\n */\n\nfunction writeImageDataBot(vx, vy, bot, direction, color, imageData) {\n  const mainBodyLeftX = vx + 1;\n  const mainBodyRightX = vx + CELL_SIZE - 2;\n  const mainBodyTopY = vy + 1;\n  const mainBodyBottomY = vy + CELL_SIZE - 2;\n\n  const botLeftX = vx;\n  const botRightX = vx + CELL_SIZE - 1;\n  const botTopY = vy;\n  const botBottomY = vy + CELL_SIZE - 1;\n\n  const mouthMargin = 4;\n  const mouthDepth = 1;\n\n  const mouth = {\n    [Bot.RIGHT]: [\n      botRightX - mouthDepth,\n      botTopY + mouthMargin,\n      botRightX,\n      botBottomY - mouthMargin,\n    ],\n    [Bot.TOP]: [\n      botLeftX + mouthMargin,\n      botTopY,\n      botRightX - mouthMargin,\n      botTopY + mouthDepth,\n    ],\n    [Bot.LEFT]: [\n      botLeftX,\n      botTopY + mouthMargin,\n      botLeftX + mouthDepth,\n      botBottomY - mouthMargin,\n    ],\n    [Bot.BOTTOM]: [\n      botLeftX + mouthMargin,\n      botBottomY - mouthDepth,\n      botRightX - mouthMargin,\n      botBottomY,\n    ],\n  };\n\n  const lmouth = mouth[direction];\n\n  writeLeftRight(mainBodyTopY, mainBodyBottomY, botLeftX, lmouth, color, imageData, botRightX);\n  writeTopBottom(mainBodyLeftX, mainBodyRightX, botTopY, lmouth, color, imageData, botBottomY);\n  writeCenter(mainBodyLeftX, mainBodyRightX, mainBodyTopY, mainBodyBottomY, lmouth, color, imageData);\n  // this.drawMouth(vx, vy, direction, imageData);\n}\n\nfunction drawBot(bot, imageData) {\n  const color = getColor(bot);\n  const x = bot.x * CELL_SIZE;\n  const y = bot.y * CELL_SIZE;\n  writeImageDataBot(x, y, bot, bot.direction, color, imageData);\n}\n\nfunction writeImageDataResource(vx, vy, color, imageData) {\n  for (let x = vx + 3; x < vx + CELL_SIZE - 3; x += 1) {\n    for (let y = vy + 3; y < vy + CELL_SIZE - 3; y += 1) {\n      writeImageDataPixel(x, y, color, imageData);\n    }\n  }\n}\n\nfunction drawResource(x, y, resources, imageData) {\n  if (resources.food) {\n    x *= CELL_SIZE;\n    y *= CELL_SIZE;\n    // const color = Math.random() > 0.5 ? { r: 140, g: 80, b: 0 } : { r: 0, g: 80, b: 0 };\n    const color = { r: 140, g: 80, b: 0 };\n    writeImageDataResource(x, y, color, imageData);\n  }\n}\n\nfunction drawResources(world, imageData) {\n  // Draw resources\n  eachCell(world, (x, y) => {\n    const cell = getCell(x, y, world.map);\n    if (cell.resources) {\n      drawResource(x, y, cell.resources, imageData);\n    }\n  });\n}\n\nfunction createDrawer(world) {\n  const canvas = document.getElementById('cnv');\n  canvas.width = WIDTH * CELL_SIZE;\n  canvas.height = HEIGHT * CELL_SIZE;\n\n  const drawer = {\n    world,\n    ctx: canvas.getContext('2d'),\n  };\n\n  drawer.ctx = canvas.getContext('2d');\n  drawer.ctx.imageSmoothingEnabled = false;\n\n  return drawer;\n}\n\nconst KUKU = WIDTH * CELL_SIZE * HEIGHT * CELL_SIZE * 4;\n// Draw bots\nfunction drawEachBot(bot, options) { drawBot(bot, options.imageData); }\n\nfunction fill(imageData) {\n  imageData.data.fill(0);\n  // Fill entire canvas with black\n  for (let i = 0; i < KUKU; i += 4) {\n    // imageData.data[i] = 0;\n    // imageData.data[i + 1] = 0;\n    // imageData.data[i + 2] = 0;\n    imageData.data[i + 3] = 255;\n  }\n}\n\nfunction redraw(drawer) {\n  const imageData = drawer.ctx.createImageData(WIDTH * CELL_SIZE, HEIGHT * CELL_SIZE);\n\n  fill(imageData);\n\n  // Draw resources\n  drawResources(drawer.world, imageData);\n\n  eachBot(drawer.world, drawEachBot, { imageData });\n\n  // Display data on canvas\n  drawer.ctx.putImageData(imageData, 0, 0);\n}\n\nexport {\n  createDrawer,\n  redraw,\n};\n","import { HEIGHT, WIDTH } from './domain/world/constants';\nimport { getBot } from './domain/world/bot_finder';\n\nconst debugOptions = {};\nlet world;\nlet counter = 0;\nwindow.counter = 0;\n\n// global vars for this module\nconst cnv = document.getElementById('cnv');\nconst info = document.getElementById('info');\nconst botWidth = cnv.clientWidth / WIDTH;\nconst botHeight = cnv.clientHeight / HEIGHT;\n\nconst updateDebugOptions = () => {\n  if (debugOptions.botX === undefined) return;\n  if (debugOptions.botY === undefined) return;\n  debugOptions.bot = getBot(debugOptions.botX, debugOptions.botY, world.map);\n};\n\nconst handleClick = (e) => {\n  debugOptions.botX = parseInt(e.x / botWidth, 10);\n  debugOptions.botY = parseInt(e.y / botHeight, 10);\n  updateDebugOptions();\n};\n\nfunction updateDebugWindow() {\n  const { bot } = debugOptions;\n  // When bot dies we should load new info\n  if (bot === undefined || (bot && bot.xp <= 0)) {\n    updateDebugOptions();\n    return;\n  }\n\n  info.innerHTML = `x: ${bot.x}</br>`\n    + `y: ${bot.y}</br>`\n    + `xp: ${parseInt(bot.xp, 10)}</br>`\n    + `program: ${bot.program.commands}</br>`\n    + `id: ${bot.id}</br>`;\n}\n\nfunction initDebugWindow(worldObject) {\n  world = worldObject;\n  cnv.addEventListener('mousedown', handleClick);\n\n  setInterval(updateDebugWindow, 1000);\n}\n\nString.prototype.hashCode = function () {\n  let hash = 0; let i; let\n    chr;\n  if (this.length === 0) return hash;\n  for (i = 0; i < this.length; i += 1) {\n    chr = this.charCodeAt(i);\n    hash = ((hash << 5) - hash) + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n  return hash;\n};\n\nfunction onTick(times) {\n  window.counter ++;\n  counter += 1;\n  //const hash = JSON.stringify(window.debugWorld).hashCode();\n  window.debugInfo1 = `${counter} ${Date.now()} perf: ${times[0]}, ${times[1]} milliseconds`;\n  updateDebugWindow();\n}\n\nexport {\n  initDebugWindow,\n  onTick,\n};\n","import { createDrawer, redraw } from './drawer';\nimport {\n  createWorld, step as worldStep,\n} from './domain/world';\nimport { initDebugWindow, onTick } from './debug_window';\n// import M from './random.js';\n\n// let redraw;\n\nfunction debugPerformance(performer, param = undefined) {\n  const time = performance.now();\n  performer(param);\n  return performance.now() - time;\n}\n\nfunction step(world, drawer) {\n\n\n  if (window.counter > 50000) {\n\n    //worldStep(world);\n    //redraw(drawer);\n    const t0 = debugPerformance(redraw, drawer);\n\n    world.map[80][20].bot.direction = (world.map[80][20].bot.direction + 1) & 3;\n    // // Print performance debug information\n\n    onTick([t0, t0]);\n    requestAnimationFrame(() => step(world, drawer));\n    return\n  }\n\n  //worldStep(world);\n  //redraw(drawer);\n  const t0 = debugPerformance(worldStep, world);\n  const t1 = debugPerformance(redraw, drawer);\n  // // Print performance debug information\n  onTick([t0, t1]);\n\n  requestAnimationFrame(() => step(world, drawer));\n}\n\n// window.debugInfo2 = {\n//   counter: 0,\n// };\n//\n// var canvas = document.getElementById('cnv');\n// var ctx = canvas.getContext('2d');\n// var W = 2500;\n// var H = 2500;\n// canvas.width = W;\n// canvas.height = H;\n//\n//\n// function test(timestamp) {\n//   window.debugInfo2.counter ++;\n//\n//   const imageData = ctx.createImageData(W, H);\n//\n//   // Fill entire canvas with black\n//   for (let i = 0; i < W * H * 4; i += 4) {\n//     imageData.data[i] = 200;\n//     imageData.data[i + 1] = 100;\n//     imageData.data[i + 2] = 0;\n//     imageData.data[i + 3] = 255;\n//   }\n//\n//   ctx.putImageData(imageData, 0, 0);\n//\n//   requestAnimationFrame(test);\n// }\n\nfunction run(world, drawer) {\n  // setInterval(() => {\n  //   console.log(Date.now(), window.debugInfo2); // eslint-disable-line no-console\n  // }, 1000);\n  // requestAnimationFrame(test);\n  // return\n\n  // worldStep = world.step.bind(world);\n  // redraw = drawer.redraw.bind(drawer);\n\n  // this.stepBusinessLogic();\n\n  requestAnimationFrame(() => step(world, drawer));\n\n  setInterval(() => {\n    console.log(Date.now(), window.debugInfo1); // eslint-disable-line no-console\n  }, 1000);\n\n  initDebugWindow(world);\n}\n\nfunction perform() {\n  const world = createWorld();\n  const drawer = createDrawer(world);\n  run(world, drawer);\n}\n\nfunction debug(msg) {\n  console.log(msg); // eslint-disable-line no-console\n}\n\n// stepBusinessLogic() {\n//   return new Promise((resolve, _) => {\n//     this.world.step();\n//     this.drawer.redraw();\n//     resolve();\n//   }).then((res) => {\n//     this.stepBusinessLogic();\n//   });\n// }\n\n// stepRedraw() {\n//\n// }\n\nexport default {\n  debug,\n  perform,\n};\n","import App from './app';\n\nApp.perform();\n"],"names":["WIDTH","normalizeCoords","x","y","HEIGHT","SHIFTS","getBot","map","bot","rightCyclicShift","ar","push","shift","removeBot","addBot","Error","validateCoords","getCell","DEFAULT_BOT","direction","id","rotate","program","commands","current","options","xp","style","h","s","b","generateId","Math","random","generateRandom","generateProgram","floor","v","liveStep","tryDie","world","onDie","cloneBot","changes","undefined","slice","processing","isProcessing","RIGHT","TOP","LEFT","BOTTOM","DEFAULT_XP","add","resource","resources","OPERATIONS","MOVE","CLONE","EAT","EAT_SOLAR","ROTATE_CLOCKWISE","ROTATE_COUNTERCLOCKWISE","arRandom","array","length","randomOperationCode","Object","values","randomChangeStyleComponent","value","change","maxComponentValue","sign","execute","position","frontPosition","hasBotInFront","dest","setCellProps","moveBot","_world","cell","food","light","power","backPosition","newBot","operation","items","generate","i","eachCell","performer","eachBot","mutations","mutateSubstitution","splice","mutateDeletion","mutateInsertion","mutate","deadBot","type","flushBotsProcessing","inMouth","mouth","CELL_SIZE","writeImageDataPixel","color","imageData","index","data","r","g","a","drawEachBot","dots","weights","avg","reduce","arguments","f","p","q","t","round","HSVtoRGB","getColor","vx","vy","mainBodyLeftX","mainBodyRightX","mainBodyTopY","mainBodyBottomY","botLeftX","botRightX","botTopY","botBottomY","lmouth","writeLeftRight","writeTopBottom","writeCenter","writeImageDataBot","drawBot","redraw","drawer","ctx","createImageData","fill","writeImageDataResource","drawResource","drawResources","putImageData","debugOptions","counter","window","cnv","document","getElementById","info","botWidth","clientWidth","botHeight","clientHeight","updateDebugOptions","botX","botY","handleClick","e","parseInt","updateDebugWindow","innerHTML","initDebugWindow","worldObject","addEventListener","setInterval","onTick","times","debugInfo1","Date","now","debugPerformance","param","time","performance","t0","requestAnimationFrame","run","console","log","String","prototype","hashCode","chr","hash","this","charCodeAt","initCell","initCells","populate","initResources","debugWorld","createWorld","canvas","width","height","getContext","imageSmoothingEnabled","createDrawer"],"sourceRoot":""}