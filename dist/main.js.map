{"version":3,"file":"main.js","mappings":"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","sources":["webpack://evo-3/./src/domain/command/index.js","webpack://evo-3/./src/domain/program.js","webpack://evo-3/./src/domain/mutation.js","webpack://evo-3/./src/domain/world.js","webpack://evo-3/./src/domain/resource.js","webpack://evo-3/./src/domain/bot.js","webpack://evo-3/./src/app.js"],"sourcesContent":["import { OPERATIONS } from '../program';\nimport { Bot } from '../bot';\n// import Move from './command/move';\n// import RotateClockwise from './rotate_clockwise';\n// import RotateCounterclockwise from './rotate_counterclockwise';\n// import Eat from './eat';\n\nconst CLONE_RATE = 2;\n\nexport class Command {\n  // Generates random operations sequence\n  static rand() {\n    const items = [\n      OPERATIONS.MOVE,\n      OPERATIONS.ROTATE_CLOCKWISE,\n      OPERATIONS.ROTATE_COUNTERCLOCKWISE,\n      OPERATIONS.EAT,\n      OPERATIONS.EAT_SOLAR,\n      OPERATIONS.CLONE,\n      OPERATIONS.OVERPOPULATION,\n      //\t\t\tOPERATIONS.KILL_NEIGHBORS,\n    ];\n\n    // if (Math.random() > 0.99) {\n    // items.push(OPERATIONS.CLONE);\n    // }\n\n    return items[Math.floor(Math.random() * items.length)];\n  }\n\n  static execute(bot, world) {\n    if (bot.processing === true) {\n      return;\n    }\n\n    bot.processing = true;\n    // debug(bot);\n\n    const commands = {\n      [OPERATIONS.MOVE]: CommandMove,\n      [OPERATIONS.ROTATE_CLOCKWISE]: CommandRotateClockwise,\n      [OPERATIONS.ROTATE_COUNTERCLOCKWISE]: CommandRotateCounterclockwise,\n      [OPERATIONS.EAT]: CommandEat,\n      [OPERATIONS.EAT_SOLAR]: CommandEatSolar,\n      [OPERATIONS.CLONE]: CommandClone,\n      [OPERATIONS.OVERPOPULATION]: CommandOverpopulation,\n      //\t\t\t[OPERATIONS.KILL_NEIGHBORS]: CommandKillNeighbors,\n    };\n\n    // const operation = bot.program.commands.shift();\n    // if (operation === undefined) { return; }\n    // bot.program.commands.push(operation);\n\n    if (bot.program.current >= bot.program.commands.length) {\n      bot.program.current = bot.program.commands.length - 1;\n    }\n\n    const operation = bot.program.commands[bot.program.current];\n    if (operation === undefined) {\n      return;\n    }\n\n    bot.program.current++;\n    if (bot.program.current >= bot.program.commands.length) {\n      bot.program.current = 0;\n    }\n\n    commands[operation].execute(bot, world);\n\n    if (operation === OPERATIONS.EAT_SOLAR) {\n      CommandOverpopulation.execute(bot, world);\n    }\n  }\n}\n\nclass CommandMove {\n  static execute(bot, world) {\n    const { x: xNew, y: yNew } = Bot.frontPosition(bot);\n\n    const cell = world.getCell(xNew, yNew);\n    const botInFront = Bot.get(cell);\n\n    if (botInFront) {\n      bot.options = { ...bot.options, hasBotInFront: true };\n    } else {\n      // Write moved bot to new cell and remove this bot from old cell\n      world.setCellProps(xNew, yNew, { bot }, world.map);\n      delete world.getCell(bot.x, bot.y).bot;\n      bot.x = xNew;\n      bot.y = yNew;\n      bot.options = { ...bot.options, hasBotInFront: false };\n    }\n  }\n}\n\nclass CommandRotateClockwise {\n  static execute(bot, world) {\n    bot.direction = CommandRotateClockwise.rotate(bot.direction, 1);\n  }\n\n  /*\n  * @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n  * @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n  */\n  static rotate(direction, rotate) {\n    return (((direction) + rotate) & 3);\n  }\n}\n\nclass CommandRotateCounterclockwise {\n  static execute(bot, world) {\n    bot.direction = CommandRotateCounterclockwise.rotate(bot.direction, -1);\n  }\n\n  /*\n  * @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n  * @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n  */\n  static rotate(direction, rotate) {\n    return (((direction) + rotate) & 3);\n  }\n}\n\nclass CommandEat {\n  static execute(bot, world) {\n    const cell = world.getCell(bot.x, bot.y);\n    if (cell.resources.food) {\n      bot.xp += 100;\n      if (bot.xp > 255) bot.xp = 255;\n      delete cell.resources.food;\n    }\n  }\n}\n\nclass CommandEatSolar {\n  static execute(bot, world) {\n    const cell = world.getCell(bot.x, bot.y);\n\n    bot.xp += cell.resources.light.power * 3;\n  }\n}\n\nclass CommandClone {\n  static execute(bot, world) {\n    const position = Bot.backPosition(bot);\n    const backCell = world.getCell(position.x, position.y);\n    const botInBack = Bot.get(backCell);\n    if (botInBack) {\n      return;\n    }\n\n    if (bot.xp < Bot.DEFAULT_XP * CLONE_RATE) {\n      return;\n    }\n\n    // Old bot lost half xp\n    bot.xp /= 2;\n\n    // New bot stays behind old, has default XP\n    const newBot = Bot.cloneBot(\n      bot,\n      {\n        ...position,\n        id: Bot.generateId(),\n        direction: CommandClone.turn(bot.direction),\n        xp: Bot.DEFAULT_XP,\n      },\n    );\n\n    world.addBot(newBot.x, newBot.y, newBot);\n  }\n\n  static turn(direction) {\n    return (((direction / 90) + 2) & 3);\n  }\n}\n\nclass CommandOverpopulation {\n  static execute(bot, world) {\n    const bots = [];\n    let coords;\n\n    let neighbors = 0;\n\n    world.eachNeighborBot(bot, world, (neighborBot) => {\n      neighbors++;\n    });\n\n\n    bot.xp -= neighbors / 3;\n  }\n}\n\nclass CommandKillNeighbors {\n  static execute(bot, world) {\n    const { x: xNew, y: yNew } = Bot.frontPosition(bot);\n    const cell = world.getCell(xNew, yNew);\n    const botInFront = Bot.get(cell);\n    if (botInFront) {\n      world.destroyBot(botInFront);\n    }\n\n    return;\n\n    world.eachNeighborBot(bot, world, (neighborBot) => {\n      world.destroyBot(neighborBot);\n    });\n  }\n}\n","import { Command } from './command';\n\nconst PROGRAM_LENGTH = 10;\n\nexport class Program {\n  static generate() {\n    const commands = [];\n    // Create program with PROGRAM_LENGTH commands\n    for (let i = 0; i < PROGRAM_LENGTH; i++) {\n      commands.push(Command.rand());\n    }\n\n    return {\n      commands,\n      current: 0,\n    };\n  }\n\n  static step(bot, world) {\n    Command.execute(bot, world);\n  }\n}\n\nconst OPERATIONS = {\n  MOVE: 0,\n  ROTATE_CLOCKWISE: 1,\n  ROTATE_COUNTERCLOCKWISE: 2,\n  EAT: 3,\n  EAT_SOLAR: 4,\n  CLONE: 5,\n  OVERPOPULATION: 6,\n//\t\tKILL_NEIGHBORS: 7,\n};\n\nexport {\n  OPERATIONS,\n};\n","import { OPERATIONS } from './program';\n\nexport class Mutation {\n  static MUTATION_PROBABILITY = 0.001;\n\n  static mutate(bot) {\n    // Mutations are very rare\n    if (Math.random() > Mutation.MUTATION_PROBABILITY) {\n      return;\n    }\n\n    const mutations = [\n      (commands, position) => this.mutateSubstitution(commands, position),\n      (commands, position) => this.mutateDeletion(commands, position),\n      (commands, position) => this.mutateInsertion(commands, position),\n    ];\n\n    const position = Math.floor(Math.random() * bot.program.commands.length);\n\n    mutations.random()(bot.program.commands, position);\n\n    bot.style.h = this.randomChangeStyleComponent(bot.style.h);\n    bot.style.s = this.randomChangeStyleComponent(bot.style.s);\n    bot.style.v = this.randomChangeStyleComponent(bot.style.v); //  * (bot.xp * 2 / 255)\n\n\n\n    // // Substitution\n    // bot.program.commands[position] = this.randomOperationCode();\n    //\n    // // Deletion\n    // bot.program.commands.splice(position, 1);\n    //\n    // // Insertion\n    // bot.program.commands.splice(position, 0, this.randomOperationCode());\n  }\n\n\n  static randomChangeStyleComponent(value) {\n    const minComponentValue = 0;\n    const maxComponentValue = 1;\n    const change = maxComponentValue / 100;\n    let sign = Math.random() > 0.5 ? 1 : -1;\n\n    if (value + change * sign <= 0 || value + change * sign >= 1) {\n      sign *= -1;\n    }\n    return value + change * sign;\n  }\n\n  static mutateSubstitution(commands, position) {\n    commands[position] = this.randomOperationCode();\n    return commands;\n  }\n\n\n  static mutateDeletion(commands, position) {\n    commands.splice(position, 1);\n    return commands;\n  }\n\n  static mutateInsertion(commands, position) {\n    commands.splice(position, 0, this.randomOperationCode());\n    return commands;\n  }\n\n  static randomOperationsPosition(commands) {\n    return Math.floor(Math.random() * bot.program.commands.length);\n  }\n\n  static randomOperationCode() {\n    return Object.values(OPERATIONS).random();\n  }\n}\n","import { Bot } from './bot';\nimport { Resource } from './resource';\nimport { Mutation } from './mutation';\nimport { Program } from './program';\n\n/**\n * Bot has 4 directions: right, up, left, down. Direction stored as code:\n * right - 0, up - 90, left - 180, down - 270. It is angle of rotation counterclockwise.\n */\n\nconst WIDTH = 40;\nconst HEIGHT = 20;\n\nexport class World {\n\n  constructor(width, height) {\n    this.width = width; // cols\n    this.height = height; // rows\n    this.initCells();\n    // For debug\n    window.debugWorld = this;\n  }\n\n  static validateCoords(x, y) {\n    if (x >= WIDTH || x < 0) {\n      throw `x should be from 0 to ${WIDTH}`;\n    }\n\n    if (y >= HEIGHT || y < 0) {\n      throw `x should be from 0 to ${WIDTH}`;\n    }\n  }\n\n  static normalizeCoords(x, y) {\n    if (x < 0) x = WIDTH - 1;\n    if (x > WIDTH - 1) x = 0;\n    if (y < 0) y = HEIGHT - 1;\n    if (y > HEIGHT - 1) y = 0;\n\n    return { x: x, y: y };\n  }\n\n  eachCell(performer) {\n    for(let x = 0; x < this.width; x++) {\n      for(let y = 0; y < this.height; y++) {\n        performer(x, y);\n      }\n    }\n  }\n\n  eachBot(performer) {\n    this.eachCell((x, y) => {\n      const bot = Bot.get(this.getCell(x, y));\n      //debug(bot)\n      if (bot) {\n        performer(bot);\n      }\n    });\n  }\n\n  eachNeighborBot(bot, world, performer) {\n    for(let x = -1; x <= 1; x++) {\n      for(let y = -1; y <= 1; y++) {\n        if (x !== 0 && y !== 0) {\n\n          const coords = World.normalizeCoords(bot.x + x, bot.y + y);\n          const cell = world.getCell(coords.x, coords.y);\n          const neighborBot = Bot.get(cell);\n          if(neighborBot && Bot.isProcessing(neighborBot)) {\n            performer(neighborBot);\n          }\n        }\n      }\n    }\n  }\n\n  populate() {\n    //this.populateTest1(); return;\n\n    this.eachCell((x, y) => {\n      if (Math.random() > 0.90) {\n        this.addBot(x, y, Bot.generateRandom(x, y));\n      }\n    });\n  }\n\n  populateTest1() {\n    TEST_CASES[2].forEach((botOptions) => {\n      this.addBot(botOptions.x, botOptions.y, botOptions);\n    });\n  }\n\n  initResources(map) {\n    let a = 0;\n    this.eachCell((x, y) => {\n      if (Math.random() > 0.9) {\n        a ++;\n        let resource = Resource.generateRandom();\n        Resource.add(x, y, resource, map);\n      }\n      let resourceLight = { light: { type: 'light', power: 1 - y / HEIGHT } };\n      Resource.add(x, y, resourceLight, map);\n    });\n    //debug(a)\n  }\n\n  step() {\n    // localStorage.world = JSON.stringify(this.map);\n\n    // Perform next action for every Bot\n    this.eachBot( (bot) => {\n      Mutation.mutate(bot);\n      Program.step(bot, this);\n\n      Bot.liveStep(bot);\n      Bot.tryDie(bot, this);\n    });\n    //debug(this.map[0][0].resources);\n\n    // this.eachBot( bot => {\n    //\n    // });\n\n    // Bots perform sequentially, cell by cell, so if bot perform in one cell and moved to other cell,\n    // it can lead to repeated performing. On the world step we mark bot as processing and bot will not\n    // performed again on this step. After processing bots we should flush bots locks.\n    this.eachBot( bot => bot.processing = false);\n  }\n\n\n\n  destroyBot(bot) {\n    delete this.getCell(bot.x, bot.y).bot;\n  }\n\n  getCell(x, y) {\n    return this.map[x][y];\n  }\n\n  setCellProps(x, y, value, map) {\n    map[x][y] = { ...map[x][y], ...value };\n  }\n\n  initCell(x, y, value = undefined) {\n    if (value === undefined) {\n      value = {\n        resources: {},\n      };\n    }\n\n    if (this.map[x] === undefined) {\n      this.map[x] = [];\n    }\n\n    this.map[x][y] = value;\n  }\n\n  /* PRIVATE */\n  initCells() {\n    //debug('initCells');\n    this.map = [];\n    this.eachCell((x, y) => {\n      this.initCell(x, y);\n    });\n  }\n\n  addBot(x, y, bot) {\n    World.validateCoords(x, y);\n\n    if (this.map[x][y].bot) {\n      throw `Bot already exists in cell ${x}:${y}`;\n    }\n    //debug('addBot');\n    this.map[x][y].bot = bot;\n  }\n\n  print() {\n    let s = '';\n    for(let y = 0; y < this.height; y++) {\n      for(let x = 0; x < this.width; x++) {\n        s += this.map[x][y].bot ? 1 : '.';\n      }\n      s += \"\\n\";\n    }\n    //debug(s);\n  }\n}\n\n\n// Creates world with population\nexport class WorldCreator {\n  static create() {\n    // Create world as matrix\n    const world = new World(WIDTH, HEIGHT);\n    // Create bots in world\n    world.populate();\n    world.initResources(world.map);\n\n    return world;\n  }\n}\n\nexport {\n  WIDTH,\n  HEIGHT,\n};\n","import { World } from './world';\n\nexport class Resource {\n  static add(x, y, resource, map) {\n    World.validateCoords(x, y);\n    map[x][y].resources = {\n      ...map[x][y].resources,\n      ...resource,\n    };\n  }\n\n  static generateRandom() {\n    return {\n      food: {\n        type: 'food',\n      },\n    };\n  }\n}\n","import { Program } from './program';\nimport { Resource } from './resource';\nimport { World } from './world';\n\nconst DEFAULT_BOT = {\n  x: 0,\n  y: 0,\n  direction: 0,\n  id: null,\n  rotate: 1,\n  program: { commands: [], current: 0 }, // TODO: ссылка на общий объект\n  options: {}, // TODO: ссылка на общий объект\n  xp: 127,\n  style: {\n    h: 1,\n    s: 1,\n    b: 1\n  }\n\n};\n\n\nfunction shifts() {\n  return [[1, 0], [0, -1], [-1, 0], [0, 1]];\n  //      left    top      right    bottom\n}\n\nfunction rightCyclicShift(ar) {\n  // Mutates ar for performance purposes\n  ar.push(ar.shift());\n  return ar;\n}\n\n/*\n* @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\nfunction rotate1(direction, rotate) {\n  return (((direction) + rotate) & 3);\n}\n\n/*\n* @param direction {Number} can be 0 (right), 90 (top), 180 (left), 270 (bottom)\n* @param rotate {Number} can be 1 (clockwise) or -1 (counterclockwise)\n*/\nfunction rotate2(direction, rotate) {\n  return (((direction) + rotate) & 3);\n}\n\n// function rightPosition(bot) {\n//   return World.normalizeCoords(bot.x + 1, bot.y + 0);\n// }\n//\n// function topPosition(bot) {\n//   return World.normalizeCoords(bot.x + 0, bot.y - 1);\n// }\n//\n// function leftPosition(bot) {\n//   return World.normalizeCoords(bot.x - 1, bot.y + 0);\n// }\n//\n// function bottomPosition(bot) {\n//   return World.normalizeCoords(bot.x + 0, bot.y + 1);\n// }\n\nclass Bot {\n  static DEFAULT_XP = 10;\n\n  static generateRandom(x, y) {\n    return {\n      ...DEFAULT_BOT,\n      id: Bot.generateId(),\n      x: x,\n      y: y,\n      direction: Math.floor(Math.random() * 4),\n      rotate: Math.random() > 0.5 ? 1 : -1,\n      program: Program.generate(),\n      options: {},\n      style: {\n        h: Math.random(),\n        s: Math.random(),\n        v: Math.random(),\n      }\n    };\n  }\n\n  static get(cell) {\n    return cell.bot;\n  }\n\n  // Returns coordinates behind the back of the bot\n  static frontPosition(bot) {\n    const shift = shifts()[bot.direction];\n    return World.normalizeCoords(bot.x + shift[0], bot.y + shift[1]);\n  }\n\n  // Returns coordinates behind the back of the bot\n  static backPosition(bot) {\n    const shift = rightCyclicShift(rightCyclicShift(shifts()))[bot.direction];\n    //const shift = [[-1, 0], [0, 1], [1, 0], [0, -1]][bot.direction];\n    return World.normalizeCoords(bot.x + shift[0], bot.y + shift[1]);\n  }\n\n  static cloneBot(bot, changes = {}) {\n    const newBot = JSON.parse(JSON.stringify(bot));\n    return {\n      ...newBot,\n      ...changes,\n    }\n  }\n\n  static generateId() {\n    return '' + Math.random();\n  }\n\n  // tick of the bot live\n  static liveStep(bot) {\n    bot.xp--;\n  }\n\n  static tryDie(bot, world) {\n    if (bot.xp <= 0) {\n      world.destroyBot(bot);\n\n      const resource = Resource.generateRandom();\n\n      Resource.add(bot.x, bot.y, resource, world.map);\n    }\n  }\n\n  static isProcessing(bot) {\n    return bot.processing == false\n  }\n}\n\nexport { Bot, DEFAULT_BOT };\n","import { Bot, DEFAULT_BOT } from './domain/bot';\nimport { WorldCreator, World, WIDTH, HEIGHT } from './domain/world';\n\n// const DEFAULT_CELL = {\n// \tresources: {},\n// };\n\n// const FPS = 1;\n\n// Groups of bots for testing purposes. They can be used in populate()\nconst TEST_CASES = [\n  [\n    {\n      ...DEFAULT_BOT, x: 42, y: 20, direction: 90, id: '0.99', rotate: 1, program: { commands: [1, 1, 0, 0, 1] }, options: {},\n    },\n    {\n      ...DEFAULT_BOT, x: 42, y: 21, direction: 90, id: '0.10', rotate: 1, program: { commands: [0, 1, 1, 1, 0] }, options: {},\n    },\n  ],\n  [\n    {\n      ...DEFAULT_BOT, x: 10, y: 10, direction: 270, id: '0.99', rotate: 1, program: { commands: [0, 1] }, options: {}, processing: false,\n    },\n    {\n      ...DEFAULT_BOT, x: 10, y: 11, direction: 90, id: '0.10', rotate: 1, program: { commands: [0, 1] }, options: {}, processing: false,\n    },\n  ],\n  [\n    {\n      ...DEFAULT_BOT, x: 10, y: 10, direction: 270, id: '0.99', rotate: 1, program: { commands: [5] }, options: {}, processing: false,\n    },\n  ],\n];\n\n/** ***********************************************\n * Infrastructure level\n ************************************************ */\n\nfunction debug(msg) {\n  console.log(msg);\n}\n\nclass Drawer {\n  constructor(world) {\n    this.world = world;\n    this.size = 10; // size of shulker\n\n    const canvas = document.getElementById('cnv');\n    canvas.width = WIDTH * this.size;\n    canvas.height = HEIGHT * this.size;\n    // canvas.style.width = WIDTH * 10;\n    // canvas.style.height = HEIGHT * 10;\n    this.ctx = canvas.getContext('2d');\n    // this.ctx.imageSmoothingEnabled = false;\n  }\n\n  redraw() {\n    const imageData = this.ctx.createImageData(WIDTH * this.size, HEIGHT * this.size);\n\n    // Fill entire canvas with black\n    for (let i = 0; i < WIDTH * this.size * HEIGHT * this.size * 4; i += 4) {\n      imageData.data[i] = 0;\n      imageData.data[i + 1] = 0;\n      imageData.data[i + 2] = 0;\n      imageData.data[i + 3] = 255;\n    }\n\n    // Draw resources\n    let a = 0;\n    this.world.eachCell((x, y) => {\n      const cell = this.world.getCell(x, y);\n      if (cell.resources) {\n        if (cell.resources.food) {\n          a++;\n        }\n\n        this.drawResource(x, y, cell.resources, imageData);\n      }\n    });\n    // debug(`cells: ${a}`)\n\n    // Draw bots\n    this.world.eachBot((bot) => {\n      this.drawBot(bot, imageData);\n    });\n\n    // Display data on canvas\n    this.ctx.putImageData(imageData, 0, 0);\n  }\n\n  drawResource(x, y, resources, imageData) {\n    if (resources.food) {\n      x *= this.size;\n      y *= this.size;\n      // const color = Math.random() > 0.5 ? { r: 140, g: 80, b: 0 } : { r: 0, g: 80, b: 0 };\n      const color = { r: 140, g: 80, b: 0 };\n      this.writeImageDataResource(x, y, color, imageData);\n    }\n  }\n\n  writeImageDataResource(vx, vy, color, imageData) {\n    for (let x = vx + 3; x < vx + this.size - 3; x++) {\n      for (let y = vy + 3; y < vy + this.size - 3; y++) {\n        this.writeImageDataPixel(x, y, color, imageData);\n      }\n    }\n  }\n\n  drawBot(bot, imageData) {\n    let color;\n    // if (bot.options.hasBotInFront) {\n    //\tcolor = { r: 255, g: 0, b: 0 };\n    // } else {\n    // Bot becomes dark if hungry\n\n    // const g = 128 + parseInt(parseFloat(bot.id) * 128);\n\n    // color = { r: 0, g: g, b: 100 };\n    color = HSVtoRGB(bot.style.h, bot.style.s, bot.style.v);\n\n    // }\n    bot = this.setColor(bot);\n\n    const x = bot.x * this.size;\n    const y = bot.y * this.size;\n\n    this.writeImageDataBot(x, y, bot.direction, color, imageData);\n  }\n\n  setColor(bot) {\n\t  return bot;\n  }\n\n  writeImageDataBot(vx, vy, direction, color, imageData) {\n\n    for (let y = vy + 1; y < vy + this.size - 1; y += 1) {\n      this.writeImageDataPixel(vx, y, color, imageData);\n      this.writeImageDataPixel(vx + this.size - 1, y, color, imageData);\n    }\n\n    for (let x = vx + 1; x < vx + this.size - 1; x += 1) {\n      this.writeImageDataPixel(x, vy, color, imageData);\n      this.writeImageDataPixel(x, vy + this.size - 1, color, imageData);\n    }\n\n    for (let x = vx + 1; x < vx + this.size - 1; x++) {\n      for (let y = vy + 1; y < vy + this.size - 1; y++) {\n        this.writeImageDataPixel(x, y, color, imageData);\n      }\n    }\n\n\n\n    // //Draw mouth (face)\n    // const mouthDeep = 1;\n    // const mouthMargins = 3;\n    // const faceColor = { r: 0, g: 0, b: 0 };\n    // if (direction == 0) {\n    // \tfor (let x = vx + this.size - mouthDeep; x < vx + this.size; x++) {\n    // \t\tfor (let y = vy + mouthMargins; y < vy + this.size - mouthMargins; y++) {\n    // \t\t\tthis.writeImageDataPixel(x, y, faceColor, imageData);\n    // \t\t}\n    // \t}\n    // }\n    // if (direction == 90) {\n    // \tfor (let x = vx + mouthMargins; x < vx + this.size - mouthMargins; x++) {\n    // \t\tfor (let y = vy; y < vy + mouthDeep; y++) {\n    // \t\t\tthis.writeImageDataPixel(x, y, faceColor, imageData);\n    // \t\t}\n    // \t}\n    // }\n    // if (direction == 180) {\n    // \tfor (let x = vx; x < vx + mouthDeep; x++) {\n    // \t\tfor (let y = vy + mouthMargins; y < vy + this.size - mouthMargins; y++) {\n    // \t\t\tthis.writeImageDataPixel(x, y, faceColor, imageData);\n    // \t\t}\n    // \t}\n    // }\n    // if (direction == 270) {\n    // \tfor (let x = vx + mouthMargins; x < vx + this.size - mouthMargins; x++) {\n    // \t\tfor (let y = vy + this.size - mouthDeep; y < vy + this.size; y++) {\n    // \t\t\tthis.writeImageDataPixel(x, y, faceColor, imageData);\n    // \t\t}\n    // \t}\n    // }\n  }\n\n  writeImageDataPixel(x, y, color, imageData) {\n    let index = ((y * (WIDTH * this.size * 4)) + (x * 4)) + 0;\n    imageData.data[index] = color.r;\n    index++;\n    imageData.data[index] = color.g;\n    index++;\n    imageData.data[index] = color.b;\n    index++;\n    imageData.data[index] = color.a === undefined ? 255 : color.a;\n  }\n}\n\nlet counter = 0;\nclass GamePerformer {\n  constructor(world) {\n    if (!world) throw Error('Invalid argument world');\n    this.world = world;\n    this.drawer = new Drawer(world);\n  }\n\n  step() {\n    let t0 = performance.now();\n\n    this.world.step();\n    t0 = performance.now() - t0;\n\n    counter++;\n    let t1 = performance.now();\n    this.drawer.redraw();\n    t1 = performance.now() - t1;\n\n    if (counter % 30 === 0) {\n      console.log(`${counter} ${Date.now()} perf: ${t0}, ${t1} milliseconds`);\n    }\n\n    requestAnimationFrame(() => this.step());\n  }\n\n  stepBusinessLogic() {\n    console.log(Date.now())\n    return new Promise((resolve, _) => {\n      this.world.step();\n      this.drawer.redraw();\n      resolve();\n    }).then(res => {\n      this.stepBusinessLogic();\n    });\n  }\n\n  stepRedraw() {\n\n  }\n\n  run() {\n    this.stepBusinessLogic();\n\n    // requestAnimationFrame(() => this.step());\n\n    this.initDebugWindow();\n  }\n\n  initDebugWindow() {\n    const cnv = document.getElementById('cnv');\n    const info = document.getElementById('info');\n\n    const handleMouse = (e) => {\n      // const width = cnv.clientLeft;\n      // const height = cnv.clientHeight;\n\n      const botWidth = cnv.clientWidth / WIDTH;\n      const botHeight = cnv.clientHeight / HEIGHT;\n\n      const botX = parseInt(e.x / botWidth);\n      const botY = parseInt(e.y / botHeight);\n\n      this.debugOptions = {\n        botX,\n        botY,\n      };\n    };\n    cnv.addEventListener('mousedown', handleMouse);\n\n    requestAnimationFrame(() => this.updateDebugWindow());\n  }\n\n  updateDebugWindow() {\n    if (this.debugOptions) {\n      const info = document.getElementById('info');\n\n      const cell = debugWorld.getCell(this.debugOptions.botX, this.debugOptions.botY);\n      let bot = Bot.get(cell);\n\n      if (!bot) {\n        bot = {\n          x: '',\n          y: '',\n          xp: '',\n          program: '',\n          id: '',\n        };\n      }\n\n      let content = '';\n\n      // `${jsonPretty}`\n      // const jsonPretty = JSON.stringify(bot);\n      content += `x: ${bot.x}</br>`;\n      content += `y: ${bot.y}</br>`;\n      content += `xp: ${Math.floor(bot.xp)}</br>`;\n      content += `program: ${bot.program.commands}</br>`;\n      content += `id: ${bot.id}</br>`;\n\n      info.innerHTML = content;\n\n      // info.innerHTML = `${botX}:${botY}:${jsonPretty}`;\n      // info.style.left = e.x + 'px';\n      // info.style.top = e.y + 'px';\n    }\n\n    requestAnimationFrame(() => this.updateDebugWindow());\n  }\n}\n\nfunction run() {\n  const world = WorldCreator.create();\n  const game = new GamePerformer(world);\n  game.run();\n}\n\n/* accepts parameters\n * h  Object = {h:x, s:y, v:z}\n * OR\n * h, s, v\n * https://stackoverflow.com/questions/17242144/javascript-convert-hsb-hsv-color-to-rgb-accurately\n*/\nfunction HSVtoRGB(h, s, v) {\n  let r; let g; let b; let i; let f; let p; let q; let\n    t;\n  if (arguments.length === 1) {\n    s = h.s, v = h.v, h = h.h;\n  }\n  i = Math.floor(h * 6);\n  f = h * 6 - i;\n  p = v * (1 - s);\n  q = v * (1 - f * s);\n  t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0: r = v, g = t, b = p; break;\n    case 1: r = q, g = v, b = p; break;\n    case 2: r = p, g = v, b = t; break;\n    case 3: r = p, g = q, b = v; break;\n    case 4: r = t, g = p, b = v; break;\n    case 5: r = v, g = p, b = q; break;\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  };\n}\n\nArray.prototype.random = function () {\n  return this[Math.floor((Math.random() * this.length))];\n};\n\nrun();\n"],"names":["Command","static","items","OPERATIONS","MOVE","ROTATE_CLOCKWISE","ROTATE_COUNTERCLOCKWISE","EAT","EAT_SOLAR","CLONE","OVERPOPULATION","Math","floor","random","length","bot","world","processing","commands","CommandMove","CommandRotateClockwise","CommandRotateCounterclockwise","CommandEat","CommandEatSolar","CommandClone","CommandOverpopulation","program","current","operation","undefined","execute","x","xNew","y","yNew","cell","getCell","options","hasBotInFront","setCellProps","map","direction","rotate","resources","food","xp","light","power","position","backCell","newBot","id","turn","addBot","neighbors","eachNeighborBot","neighborBot","Program","i","push","rand","Mutation","MUTATION_PROBABILITY","mutations","this","mutateSubstitution","mutateDeletion","mutateInsertion","style","h","randomChangeStyleComponent","s","v","value","change","maxComponentValue","sign","randomOperationCode","splice","Object","values","WIDTH","HEIGHT","World","constructor","width","height","initCells","window","debugWorld","eachCell","performer","eachBot","coords","normalizeCoords","populate","populateTest1","TEST_CASES","forEach","botOptions","initResources","resource","Resource","generateRandom","add","resourceLight","type","step","mutate","destroyBot","initCell","validateCoords","print","DEFAULT_BOT","b","rightCyclicShift","ar","shift","generateId","generate","changes","JSON","parse","stringify","Drawer","size","canvas","document","getElementById","ctx","getContext","redraw","imageData","createImageData","data","drawResource","drawBot","putImageData","color","r","g","writeImageDataResource","vx","vy","writeImageDataPixel","f","p","q","t","arguments","round","HSVtoRGB","setColor","writeImageDataBot","index","a","counter","GamePerformer","Error","drawer","t0","performance","now","t1","console","log","Date","requestAnimationFrame","stepBusinessLogic","Promise","resolve","_","then","res","stepRedraw","run","initDebugWindow","cnv","addEventListener","e","botWidth","clientWidth","botHeight","clientHeight","botX","parseInt","botY","debugOptions","updateDebugWindow","info","content","innerHTML","Array","prototype","create"],"sourceRoot":""}